import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,e as c,b as o,d as n,a as l,o as d,r as i}from"./app-BA4_Sfsq.js";const t={},r={href:"https://docs.docker.com/compose/reference/overview/",target:"_blank",rel:"noopener noreferrer"};function u(h,e){const s=i("ExternalLinkIcon");return d(),p("div",null,[e[1]||(e[1]=c(`<h1 id="compose-命令说明" tabindex="-1"><a class="header-anchor" href="#compose-命令说明"><span>Compose 命令说明</span></a></h1><h2 id="命令对象与格式" tabindex="-1"><a class="header-anchor" href="#命令对象与格式"><span>命令对象与格式</span></a></h2><p>对于 Compose 来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务或者容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到命令影响。</p><p>执行 <code>docker-compose [COMMAND] --help</code> 或者 <code>docker-compose help [COMMAND]</code> 可以查看具体某个命令的使用格式。</p><p><code>docker-compose</code> 命令的基本的使用格式是</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> <span class="token punctuation">[</span>-f<span class="token operator">=</span><span class="token operator">&lt;</span>arg<span class="token operator">&gt;</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> <span class="token punctuation">[</span>ARGS<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="命令选项" tabindex="-1"><a class="header-anchor" href="#命令选项"><span>命令选项</span></a></h2><ul><li><p><code>-f, --file FILE</code> 指定使用的 Compose 模板文件，默认为 <code>docker-compose.yml</code>，可以多次指定。</p></li><li><p><code>-p, --project-name NAME</code> 指定项目名称，默认将使用所在目录名称作为项目名。</p></li><li><p><code>--verbose</code> 输出更多调试信息。</p></li><li><p><code>-v, --version</code> 打印版本并退出。</p></li></ul><h2 id="命令使用说明" tabindex="-1"><a class="header-anchor" href="#命令使用说明"><span>命令使用说明</span></a></h2><h3 id="build" tabindex="-1"><a class="header-anchor" href="#build"><span><code>build</code></span></a></h3><p>格式为 <code>docker-compose build [options] [SERVICE...]</code>。</p><p>构建（重新构建）项目中的服务容器。</p><p>服务容器一旦构建后，将会带上一个标记名，例如对于 web 项目中的一个 db 容器，可能是 web_db。</p><p>可以随时在项目目录下运行 <code>docker-compose build</code> 来重新构建服务。</p><p>选项包括：</p><ul><li><p><code>--force-rm</code> 删除构建过程中的临时容器。</p></li><li><p><code>--no-cache</code> 构建镜像过程中不使用 cache（这将加长构建过程）。</p></li><li><p><code>--pull</code> 始终尝试通过 pull 来获取更新版本的镜像。</p></li></ul><h3 id="config" tabindex="-1"><a class="header-anchor" href="#config"><span><code>config</code></span></a></h3><p>验证 Compose 文件格式是否正确，若正确则显示配置，若格式错误显示错误原因。</p><h3 id="down" tabindex="-1"><a class="header-anchor" href="#down"><span><code>down</code></span></a></h3><p>此命令将会停止 <code>up</code> 命令所启动的容器，并移除网络</p><h3 id="exec" tabindex="-1"><a class="header-anchor" href="#exec"><span><code>exec</code></span></a></h3><p>进入指定的容器。</p><h3 id="help" tabindex="-1"><a class="header-anchor" href="#help"><span><code>help</code></span></a></h3><p>获得一个命令的帮助。</p><h3 id="images" tabindex="-1"><a class="header-anchor" href="#images"><span><code>images</code></span></a></h3><p>列出 Compose 文件中包含的镜像。</p><h3 id="kill" tabindex="-1"><a class="header-anchor" href="#kill"><span><code>kill</code></span></a></h3><p>格式为 <code>docker-compose kill [options] [SERVICE...]</code>。</p><p>通过发送 <code>SIGKILL</code> 信号来强制停止服务容器。</p><p>支持通过 <code>-s</code> 参数来指定发送的信号，例如通过如下指令发送 <code>SIGINT</code> 信号。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker-compose</span> <span class="token function">kill</span> <span class="token parameter variable">-s</span> SIGINT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="logs" tabindex="-1"><a class="header-anchor" href="#logs"><span><code>logs</code></span></a></h3><p>格式为 <code>docker-compose logs [options] [SERVICE...]</code>。</p><p>查看服务容器的输出。默认情况下，docker-compose 将对不同的服务输出使用不同的颜色来区分。可以通过 <code>--no-color</code> 来关闭颜色。</p><p>该命令在调试问题的时候十分有用。</p><h3 id="pause" tabindex="-1"><a class="header-anchor" href="#pause"><span><code>pause</code></span></a></h3><p>格式为 <code>docker-compose pause [SERVICE...]</code>。</p><p>暂停一个服务容器。</p><h3 id="port" tabindex="-1"><a class="header-anchor" href="#port"><span><code>port</code></span></a></h3><p>格式为 <code>docker-compose port [options] SERVICE PRIVATE_PORT</code>。</p><p>打印某个容器端口所映射的公共端口。</p><p>选项：</p><ul><li><p><code>--protocol=proto</code> 指定端口协议，tcp（默认值）或者 udp。</p></li><li><p><code>--index=index</code> 如果同一服务存在多个容器，指定命令对象容器的序号（默认为 1）。</p></li></ul><h3 id="ps" tabindex="-1"><a class="header-anchor" href="#ps"><span><code>ps</code></span></a></h3><p>格式为 <code>docker-compose ps [options] [SERVICE...]</code>。</p><p>列出项目中目前的所有容器。</p><p>选项：</p><ul><li><code>-q</code> 只打印容器的 ID 信息。</li></ul><h3 id="pull" tabindex="-1"><a class="header-anchor" href="#pull"><span><code>pull</code></span></a></h3><p>格式为 <code>docker-compose pull [options] [SERVICE...]</code>。</p><p>拉取服务依赖的镜像。</p><p>选项：</p><ul><li><code>--ignore-pull-failures</code> 忽略拉取镜像过程中的错误。</li></ul><h3 id="push" tabindex="-1"><a class="header-anchor" href="#push"><span><code>push</code></span></a></h3><p>推送服务依赖的镜像到 Docker 镜像仓库。</p><h3 id="restart" tabindex="-1"><a class="header-anchor" href="#restart"><span><code>restart</code></span></a></h3><p>格式为 <code>docker-compose restart [options] [SERVICE...]</code>。</p><p>重启项目中的服务。</p><p>选项：</p><ul><li><code>-t, --timeout TIMEOUT</code> 指定重启前停止容器的超时（默认为 10 秒）。</li></ul><h3 id="rm" tabindex="-1"><a class="header-anchor" href="#rm"><span><code>rm</code></span></a></h3><p>格式为 <code>docker-compose rm [options] [SERVICE...]</code>。</p><p>删除所有（停止状态的）服务容器。推荐先执行 <code>docker-compose stop</code> 命令来停止容器。</p><p>选项：</p><ul><li><p><code>-f, --force</code> 强制直接删除，包括非停止状态的容器。一般尽量不要使用该选项。</p></li><li><p><code>-v</code> 删除容器所挂载的数据卷。</p></li></ul><h3 id="run" tabindex="-1"><a class="header-anchor" href="#run"><span><code>run</code></span></a></h3><p>格式为 <code>docker-compose run [options] [-p PORT...] [-e KEY=VAL...] SERVICE [COMMAND] [ARGS...]</code>。</p><p>在指定服务上执行一个命令。</p><p>例如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker-compose</span> run ubuntu <span class="token function">ping</span> docker.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将会启动一个 ubuntu 服务容器，并执行 <code>ping docker.com</code> 命令。</p><p>默认情况下，如果存在关联，则所有关联的服务将会自动被启动，除非这些服务已经在运行中。</p><p>该命令类似启动容器后运行指定的命令，相关卷、链接等等都将会按照配置自动创建。</p><p>两个不同点：</p><ul><li><p>给定命令将会覆盖原有的自动运行命令；</p></li><li><p>不会自动创建端口，以避免冲突。</p></li></ul><p>如果不希望自动启动关联的容器，可以使用 <code>--no-deps</code> 选项，例如</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker-compose</span> run --no-deps web python manage.py shell
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将不会启动 web 容器所关联的其它容器。</p><p>选项：</p><ul><li><p><code>-d</code> 后台运行容器。</p></li><li><p><code>--name NAME</code> 为容器指定一个名字。</p></li><li><p><code>--entrypoint CMD</code> 覆盖默认的容器启动指令。</p></li><li><p><code>-e KEY=VAL</code> 设置环境变量值，可多次使用选项来设置多个环境变量。</p></li><li><p><code>-u, --user=&quot;&quot;</code> 指定运行容器的用户名或者 uid。</p></li><li><p><code>--no-deps</code> 不自动启动关联的服务容器。</p></li><li><p><code>--rm</code> 运行命令后自动删除容器，<code>d</code> 模式下将忽略。</p></li><li><p><code>-p, --publish=[]</code> 映射容器端口到本地主机。</p></li><li><p><code>--service-ports</code> 配置服务端口并映射到本地主机。</p></li><li><p><code>-T</code> 不分配伪 tty，意味着依赖 tty 的指令将无法运行。</p></li></ul><h3 id="scale" tabindex="-1"><a class="header-anchor" href="#scale"><span><code>scale</code></span></a></h3><p>格式为 <code>docker-compose scale [options] [SERVICE=NUM...]</code>。</p><p>设置指定服务运行的容器个数。</p><p>通过 <code>service=num</code> 的参数来设置数量。例如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker-compose</span> scale <span class="token assign-left variable">web</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">db</span><span class="token operator">=</span><span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将启动 3 个容器运行 web 服务，2 个容器运行 db 服务。</p><p>一般的，当指定数目多于该服务当前实际运行容器，将新创建并启动容器；反之，将停止容器。</p><p>选项：</p><ul><li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</li></ul><h3 id="start" tabindex="-1"><a class="header-anchor" href="#start"><span><code>start</code></span></a></h3><p>格式为 <code>docker-compose start [SERVICE...]</code>。</p><p>启动已经存在的服务容器。</p><h3 id="stop" tabindex="-1"><a class="header-anchor" href="#stop"><span><code>stop</code></span></a></h3><p>格式为 <code>docker-compose stop [options] [SERVICE...]</code>。</p><p>停止已经处于运行状态的容器，但不删除它。通过 <code>docker-compose start</code> 可以再次启动这些容器。</p><p>选项：</p><ul><li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</li></ul><h3 id="top" tabindex="-1"><a class="header-anchor" href="#top"><span><code>top</code></span></a></h3><p>查看各个服务容器内运行的进程。</p><h3 id="unpause" tabindex="-1"><a class="header-anchor" href="#unpause"><span><code>unpause</code></span></a></h3><p>格式为 <code>docker-compose unpause [SERVICE...]</code>。</p><p>恢复处于暂停状态中的服务。</p><h3 id="up" tabindex="-1"><a class="header-anchor" href="#up"><span><code>up</code></span></a></h3><p>格式为 <code>docker-compose up [options] [SERVICE...]</code>。</p><p>该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。</p><p>链接的服务都将会被自动启动，除非已经处于运行状态。</p><p>可以说，大部分时候都可以直接通过该命令来启动一个项目。</p><p>默认情况，<code>docker-compose up</code> 启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试。</p><p>当通过 <code>Ctrl-C</code> 停止命令时，所有容器将会停止。</p><p>如果使用 <code>docker-compose up -d</code>，将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项。</p><p>默认情况，如果服务容器已经存在，<code>docker-compose up</code> 将会尝试停止容器，然后重新创建（保持使用 <code>volumes-from</code> 挂载的卷），以保证新启动的服务匹配 <code>docker-compose.yml</code> 文件的最新内容。如果用户不希望容器被停止并重新创建，可以使用 <code>docker-compose up --no-recreate</code>。这样将只会启动处于停止状态的容器，而忽略已经运行的服务。如果用户只想重新部署某个服务，可以使用 <code>docker-compose up --no-deps -d &lt;SERVICE_NAME&gt;</code> 来重新创建服务并后台停止旧服务，启动新服务，并不会影响到其所依赖的服务。</p><p>选项：</p><ul><li><p><code>-d</code> 在后台运行服务容器。</p></li><li><p><code>--no-color</code> 不使用颜色来区分不同的服务的控制台输出。</p></li><li><p><code>--no-deps</code> 不启动服务所链接的容器。</p></li><li><p><code>--force-recreate</code> 强制重新创建容器，不能与 <code>--no-recreate</code> 同时使用。</p></li><li><p><code>--no-recreate</code> 如果容器已经存在了，则不重新创建，不能与 <code>--force-recreate</code> 同时使用。</p></li><li><p><code>--no-build</code> 不自动构建缺失的服务镜像。</p></li><li><p><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</p></li></ul><h3 id="version" tabindex="-1"><a class="header-anchor" href="#version"><span><code>version</code></span></a></h3><p>格式为 <code>docker-compose version</code>。</p><p>打印版本信息。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2>`,117)),o("ul",null,[o("li",null,[o("a",r,[e[0]||(e[0]=n("官方文档")),l(s)])])])])}const g=a(t,[["render",u],["__file","commands.html.vue"]]),b=JSON.parse('{"path":"/index/Docker/compose/commands.html","title":"Compose 命令说明","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"命令对象与格式","slug":"命令对象与格式","link":"#命令对象与格式","children":[]},{"level":2,"title":"命令选项","slug":"命令选项","link":"#命令选项","children":[]},{"level":2,"title":"命令使用说明","slug":"命令使用说明","link":"#命令使用说明","children":[{"level":3,"title":"build","slug":"build","link":"#build","children":[]},{"level":3,"title":"config","slug":"config","link":"#config","children":[]},{"level":3,"title":"down","slug":"down","link":"#down","children":[]},{"level":3,"title":"exec","slug":"exec","link":"#exec","children":[]},{"level":3,"title":"help","slug":"help","link":"#help","children":[]},{"level":3,"title":"images","slug":"images","link":"#images","children":[]},{"level":3,"title":"kill","slug":"kill","link":"#kill","children":[]},{"level":3,"title":"logs","slug":"logs","link":"#logs","children":[]},{"level":3,"title":"pause","slug":"pause","link":"#pause","children":[]},{"level":3,"title":"port","slug":"port","link":"#port","children":[]},{"level":3,"title":"ps","slug":"ps","link":"#ps","children":[]},{"level":3,"title":"pull","slug":"pull","link":"#pull","children":[]},{"level":3,"title":"push","slug":"push","link":"#push","children":[]},{"level":3,"title":"restart","slug":"restart","link":"#restart","children":[]},{"level":3,"title":"rm","slug":"rm","link":"#rm","children":[]},{"level":3,"title":"run","slug":"run","link":"#run","children":[]},{"level":3,"title":"scale","slug":"scale","link":"#scale","children":[]},{"level":3,"title":"start","slug":"start","link":"#start","children":[]},{"level":3,"title":"stop","slug":"stop","link":"#stop","children":[]},{"level":3,"title":"top","slug":"top","link":"#top","children":[]},{"level":3,"title":"unpause","slug":"unpause","link":"#unpause","children":[]},{"level":3,"title":"up","slug":"up","link":"#up","children":[]},{"level":3,"title":"version","slug":"version","link":"#version","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1731129855000,"updatedTime":1731129855000,"contributors":[{"name":"dkyg666","email":"43946866+dkyg666@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":6.59,"words":1977},"filePathRelative":"index/Docker/compose/commands.md","localizedDate":"2024年11月9日","excerpt":"\\n<h2>命令对象与格式</h2>\\n<p>对于 Compose 来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务或者容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到命令影响。</p>\\n<p>执行 <code>docker-compose [COMMAND] --help</code> 或者 <code>docker-compose help [COMMAND]</code> 可以查看具体某个命令的使用格式。</p>\\n<p><code>docker-compose</code> 命令的基本的使用格式是</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">docker-compose</span> <span class=\\"token punctuation\\">[</span>-f<span class=\\"token operator\\">=</span><span class=\\"token operator\\">&lt;</span>arg<span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">..</span>.<span class=\\"token punctuation\\">]</span> <span class=\\"token punctuation\\">[</span>options<span class=\\"token punctuation\\">]</span> <span class=\\"token punctuation\\">[</span>COMMAND<span class=\\"token punctuation\\">]</span> <span class=\\"token punctuation\\">[</span>ARGS<span class=\\"token punctuation\\">..</span>.<span class=\\"token punctuation\\">]</span>\\n</code></pre></div>"}');export{g as comp,b as data};
