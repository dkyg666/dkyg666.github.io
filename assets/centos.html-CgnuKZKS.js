import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,e as i,b as n,d as s,a,w as c,r as o,o as p}from"./app-7pmo0-8W.js";const u={},m={href:"http://test.docker.com",target:"_blank",rel:"noopener noreferrer"},k={href:"https://en.wikipedia.org/wiki/Unix_domain_socket",target:"_blank",rel:"noopener noreferrer"},v={href:"https://docs.docker.com/install/linux/docker-ce/centos/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://firewalld.org/2018/07/nftables-backend",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/moby/libnetwork/issues/2496",target:"_blank",rel:"noopener noreferrer"};function g(f,e){const l=o("ExternalLinkIcon"),d=o("RouteLink");return p(),r("div",null,[e[25]||(e[25]=i(`<h1 id="centos-安装-docker" tabindex="-1"><a class="header-anchor" href="#centos-安装-docker"><span>CentOS 安装 Docker</span></a></h1><blockquote><p>警告：切勿在没有配置 Docker YUM 源的情况下直接使用 yum 命令安装 Docker.</p></blockquote><h2 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作"><span>准备工作</span></a></h2><h3 id="系统要求" tabindex="-1"><a class="header-anchor" href="#系统要求"><span>系统要求</span></a></h3><p>Docker 支持 64 位版本 CentOS 7/8，并且要求内核版本不低于 3.10。 CentOS 7 满足最低内核的要求，但由于内核版本比较低，部分功能（如 <code>overlay2</code> 存储层驱动）无法使用，并且部分功能可能不太稳定。</p><h3 id="卸载旧版本" tabindex="-1"><a class="header-anchor" href="#卸载旧版本"><span>卸载旧版本</span></a></h3><p>旧版本的 Docker 称为 <code>docker</code> 或者 <code>docker-engine</code>，使用以下命令卸载旧版本：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> yum remove <span class="token function">docker</span> <span class="token punctuation">\\</span>
                  docker-client <span class="token punctuation">\\</span>
                  docker-client-latest <span class="token punctuation">\\</span>
                  docker-common <span class="token punctuation">\\</span>
                  docker-latest <span class="token punctuation">\\</span>
                  docker-latest-logrotate <span class="token punctuation">\\</span>
                  docker-logrotate <span class="token punctuation">\\</span>
                  docker-selinux <span class="token punctuation">\\</span>
                  docker-engine-selinux <span class="token punctuation">\\</span>
                  docker-engine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用-yum-安装" tabindex="-1"><a class="header-anchor" href="#使用-yum-安装"><span>使用 yum 安装</span></a></h2><p>执行以下命令安装依赖包：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>鉴于国内网络问题，强烈建议使用国内源，官方源请在注释中查看。</p><p>执行下面的命令添加 <code>yum</code> 软件源：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> yum-config-manager <span class="token punctuation">\\</span>
    --add-repo <span class="token punctuation">\\</span>
    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo

$ <span class="token function">sudo</span> <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;s/download.docker.com/mirrors.aliyun.com\\/docker-ce/g&#39;</span> /etc/yum.repos.d/docker-ce.repo

<span class="token comment"># 官方源</span>
<span class="token comment"># $ sudo yum-config-manager \\</span>
<span class="token comment">#     --add-repo \\</span>
<span class="token comment">#     https://download.docker.com/linux/centos/docker-ce.repo</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要测试版本的 Docker 请执行以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> yum-config-manager <span class="token parameter variable">--enable</span> docker-ce-test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="安装-docker" tabindex="-1"><a class="header-anchor" href="#安装-docker"><span>安装 Docker</span></a></h3><p>更新 <code>yum</code> 软件源缓存，并安装 <code>docker-ce</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce docker-ce-cli containerd.io
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="centos8-额外设置" tabindex="-1"><a class="header-anchor" href="#centos8-额外设置"><span>CentOS8 额外设置</span></a></h2><p>由于 CentOS8 防火墙使用了 <code>nftables</code>，但 Docker 尚未支持 <code>nftables</code>， 我们可以使用如下设置使用 <code>iptables</code>：</p><p>更改 <code>/etc/firewalld/firewalld.conf</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># FirewallBackend=nftables</span>
<span class="token assign-left variable">FirewallBackend</span><span class="token operator">=</span>iptables
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>或者执行如下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ firewall-cmd <span class="token parameter variable">--permanent</span> <span class="token parameter variable">--zone</span><span class="token operator">=</span>trusted --add-interface<span class="token operator">=</span>docker0

$ firewall-cmd <span class="token parameter variable">--reload</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用脚本自动安装" tabindex="-1"><a class="header-anchor" href="#使用脚本自动安装"><span>使用脚本自动安装</span></a></h2><p>在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，CentOS 系统上可以使用这套脚本安装，另外可以通过 <code>--mirror</code> 选项使用国内源进行安装：</p>`,27)),n("blockquote",null,[n("p",null,[e[1]||(e[1]=s("若你想安装测试版的 Docker, 请从 ")),n("a",m,[e[0]||(e[0]=s("test.docker.com")),a(l)]),e[2]||(e[2]=s(" 获取脚本"))])]),e[26]||(e[26]=i(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># $ curl -fsSL test.docker.com -o get-docker.sh</span>
$ <span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> get.docker.com <span class="token parameter variable">-o</span> get-docker.sh
$ <span class="token function">sudo</span> <span class="token function">sh</span> get-docker.sh <span class="token parameter variable">--mirror</span> Aliyun
<span class="token comment"># $ sudo sh get-docker.sh --mirror AzureChinaCloud</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行这个命令后，脚本就会自动的将一切准备工作做好，并且把 Docker 的稳定(stable)版本安装在系统中。</p><h2 id="启动-docker" tabindex="-1"><a class="header-anchor" href="#启动-docker"><span>启动 Docker</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span>
$ <span class="token function">sudo</span> systemctl start <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="建立-docker-用户组" tabindex="-1"><a class="header-anchor" href="#建立-docker-用户组"><span>建立 docker 用户组</span></a></h2>`,5)),n("p",null,[e[4]||(e[4]=s("默认情况下，")),e[5]||(e[5]=n("code",null,"docker",-1)),e[6]||(e[6]=s(" 命令会使用 ")),n("a",k,[e[3]||(e[3]=s("Unix socket")),a(l)]),e[7]||(e[7]=s(" 与 Docker 引擎通讯。而只有 ")),e[8]||(e[8]=n("code",null,"root",-1)),e[9]||(e[9]=s(" 用户和 ")),e[10]||(e[10]=n("code",null,"docker",-1)),e[11]||(e[11]=s(" 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 ")),e[12]||(e[12]=n("code",null,"root",-1)),e[13]||(e[13]=s(" 用户。因此，更好地做法是将需要使用 ")),e[14]||(e[14]=n("code",null,"docker",-1)),e[15]||(e[15]=s(" 的用户加入 ")),e[16]||(e[16]=n("code",null,"docker",-1)),e[17]||(e[17]=s(" 用户组。"))]),e[27]||(e[27]=i(`<p>建立 <code>docker</code> 组：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> <span class="token function">groupadd</span> <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将当前用户加入 <code>docker</code> 组：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> <span class="token function">usermod</span> <span class="token parameter variable">-aG</span> <span class="token function">docker</span> <span class="token environment constant">$USER</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>退出当前终端并重新登录，进行如下测试。</p><h2 id="测试-docker-是否安装正确" tabindex="-1"><a class="header-anchor" href="#测试-docker-是否安装正确"><span>测试 Docker 是否安装正确</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">--rm</span> hello-world

Unable to <span class="token function">find</span> image <span class="token string">&#39;hello-world:latest&#39;</span> locally
latest: Pulling from library/hello-world
b8dfde127a29: Pull complete
Digest: sha256:308866a43596e83578c7dfa15e27a73011bdd402185a84c5cd7f32a88b501a24
Status: Downloaded newer image <span class="token keyword">for</span> hello-world:latest

Hello from Docker<span class="token operator">!</span>
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 <span class="token number">1</span>. The Docker client contacted the Docker daemon.
 <span class="token number">2</span>. The Docker daemon pulled the <span class="token string">&quot;hello-world&quot;</span> image from the Docker Hub.
    <span class="token punctuation">(</span>amd64<span class="token punctuation">)</span>
 <span class="token number">3</span>. The Docker daemon created a new container from that image <span class="token function">which</span> runs the
    executable that produces the output you are currently reading.
 <span class="token number">4</span>. The Docker daemon streamed that output to the Docker client, <span class="token function">which</span> sent it
    to your terminal.

To try something <span class="token function">more</span> ambitious, you can run an Ubuntu container with:
 $ <span class="token function">docker</span> run <span class="token parameter variable">-it</span> ubuntu <span class="token function">bash</span>

Share images, automate workflows, and <span class="token function">more</span> with a <span class="token function">free</span> Docker ID:
 https://hub.docker.com/

For <span class="token function">more</span> examples and ideas, visit:
 https://docs.docker.com/get-started/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若能正常输出以上信息，则说明安装成功。</p><h2 id="镜像加速" tabindex="-1"><a class="header-anchor" href="#镜像加速"><span>镜像加速</span></a></h2>`,9)),n("p",null,[e[19]||(e[19]=s("如果在使用过程中发现拉取 Docker 镜像十分缓慢，可以配置 Docker ")),a(d,{to:"/index/Docker/install/mirror.html"},{default:c(()=>e[18]||(e[18]=[s("国内镜像加速")])),_:1}),e[20]||(e[20]=s("。"))]),e[28]||(e[28]=i(`<h2 id="添加内核参数" tabindex="-1"><a class="header-anchor" href="#添加内核参数"><span>添加内核参数</span></a></h2><p>如果在 CentOS 使用 Docker 看到下面的这些警告信息：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>WARNING: bridge-nf-call-iptables is disabled
WARNING: bridge-nf-call-ip6tables is disabled
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>请添加内核配置参数以启用这些功能。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> /etc/sysctl.conf <span class="token operator">&lt;&lt;-</span><span class="token string">EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后重新加载 <code>sysctl.conf</code> 即可</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> <span class="token function">sysctl</span> <span class="token parameter variable">-p</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档"><span>参考文档</span></a></h2>`,8)),n("ul",null,[n("li",null,[n("a",v,[e[21]||(e[21]=s("Docker 官方 CentOS 安装文档")),a(l)]),e[22]||(e[22]=s("。"))]),n("li",null,[n("a",b,[e[23]||(e[23]=s("https://firewalld.org/2018/07/nftables-backend")),a(l)])]),n("li",null,[n("a",h,[e[24]||(e[24]=s("https://github.com/moby/libnetwork/issues/2496")),a(l)])])])])}const D=t(u,[["render",g],["__file","centos.html.vue"]]),w=JSON.parse('{"path":"/index/Docker/install/centos.html","title":"CentOS 安装 Docker","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"准备工作","slug":"准备工作","link":"#准备工作","children":[{"level":3,"title":"系统要求","slug":"系统要求","link":"#系统要求","children":[]},{"level":3,"title":"卸载旧版本","slug":"卸载旧版本","link":"#卸载旧版本","children":[]}]},{"level":2,"title":"使用 yum 安装","slug":"使用-yum-安装","link":"#使用-yum-安装","children":[{"level":3,"title":"安装 Docker","slug":"安装-docker","link":"#安装-docker","children":[]}]},{"level":2,"title":"CentOS8 额外设置","slug":"centos8-额外设置","link":"#centos8-额外设置","children":[]},{"level":2,"title":"使用脚本自动安装","slug":"使用脚本自动安装","link":"#使用脚本自动安装","children":[]},{"level":2,"title":"启动 Docker","slug":"启动-docker","link":"#启动-docker","children":[]},{"level":2,"title":"建立 docker 用户组","slug":"建立-docker-用户组","link":"#建立-docker-用户组","children":[]},{"level":2,"title":"测试 Docker 是否安装正确","slug":"测试-docker-是否安装正确","link":"#测试-docker-是否安装正确","children":[]},{"level":2,"title":"镜像加速","slug":"镜像加速","link":"#镜像加速","children":[]},{"level":2,"title":"添加内核参数","slug":"添加内核参数","link":"#添加内核参数","children":[]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}],"git":{"createdTime":1731129855000,"updatedTime":1731129855000,"contributors":[{"name":"dkyg666","email":"43946866+dkyg666@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":3.31,"words":992},"filePathRelative":"index/Docker/install/centos.md","localizedDate":"2024年11月9日","excerpt":"\\n<blockquote>\\n<p>警告：切勿在没有配置 Docker YUM 源的情况下直接使用 yum 命令安装 Docker.</p>\\n</blockquote>\\n<h2>准备工作</h2>\\n<h3>系统要求</h3>\\n<p>Docker 支持 64 位版本 CentOS 7/8，并且要求内核版本不低于 3.10。 CentOS 7 满足最低内核的要求，但由于内核版本比较低，部分功能（如 <code>overlay2</code> 存储层驱动）无法使用，并且部分功能可能不太稳定。</p>\\n<h3>卸载旧版本</h3>\\n<p>旧版本的 Docker 称为 <code>docker</code> 或者 <code>docker-engine</code>，使用以下命令卸载旧版本：</p>"}');export{D as comp,w as data};
