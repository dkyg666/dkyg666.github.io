import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,e as i,b as e,d as s,a,w as c,r as t,o as p}from"./app-dX96qGh5.js";const u="/assets/drone-build-B4SYeVwy.png",m={},k={href:"https://cloud.drone.io",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/yeasy/docker_practice/blob/master/.drone.yml",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/drone/drone",target:"_blank",rel:"noopener noreferrer"},g={href:"https://docs.drone.io/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/docker-practice/drone-demo",target:"_blank",rel:"noopener noreferrer"};function f(D,n){const l=t("RouteLink"),o=t("ExternalLinkIcon");return p(),r("div",null,[n[13]||(n[13]=i('<h1 id="drone" tabindex="-1"><a class="header-anchor" href="#drone"><span>Drone</span></a></h1><p>基于 <code>Docker</code> 的 <code>CI/CD</code> 工具 <code>Drone</code> 所有编译、测试的流程都在 <code>Docker</code> 容器中进行。</p><p>开发者只需在项目中包含 <code>.drone.yml</code> 文件，将代码推送到 git 仓库，<code>Drone</code> 就能够自动化的进行编译、测试、发布。</p><p>本小节以 <code>GitHub</code> + <code>Drone</code> 来演示 <code>Drone</code> 的工作流程。当然在实际开发过程中，你的代码也许不在 GitHub 托管，那么你可以尝试使用 <code>Gogs</code> + <code>Drone</code> 来进行 <code>CI/CD</code>。</p><h2 id="drone-关联项目" tabindex="-1"><a class="header-anchor" href="#drone-关联项目"><span>Drone 关联项目</span></a></h2><p>在 Github 新建一个名为 <code>drone-demo</code> 的仓库。</p>',6)),e("p",null,[n[2]||(n[2]=s("打开我们已经 ")),a(l,{to:"/index/Docker/cases/ci/drone/install.html"},{default:c(()=>n[0]||(n[0]=[s("部署好的 Drone 网站")])),_:1}),n[3]||(n[3]=s(" 或者 ")),e("a",k,[n[1]||(n[1]=s("Drone Cloud")),a(o)]),n[4]||(n[4]=s("，使用 GitHub 账号登录，在界面中关联刚刚新建的 ")),n[5]||(n[5]=e("code",null,"drone-demo",-1)),n[6]||(n[6]=s(" 仓库。"))]),n[14]||(n[14]=i(`<h2 id="编写项目源代码" tabindex="-1"><a class="header-anchor" href="#编写项目源代码"><span>编写项目源代码</span></a></h2><p>初始化一个 git 仓库</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">mkdir</span> drone-demo

$ <span class="token builtin class-name">cd</span> drone-demo

$ <span class="token function">git</span> init

$ <span class="token function">git</span> remote <span class="token function">add</span> origin git@github.com:username/drone-demo.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里以一个简单的 <code>Go</code> 程序为例，该程序输出 <code>Hello World!</code></p><p>编写 <code>app.go</code> 文件</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写 <code>.drone.yml</code> 文件</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">kind</span><span class="token punctuation">:</span> pipeline
<span class="token key atrule">type</span><span class="token punctuation">:</span> docker
<span class="token key atrule">name</span><span class="token punctuation">:</span> build
<span class="token key atrule">steps</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> build
  <span class="token key atrule">image</span><span class="token punctuation">:</span> golang<span class="token punctuation">:</span>alpine
  <span class="token key atrule">pull</span><span class="token punctuation">:</span> if<span class="token punctuation">-</span>not<span class="token punctuation">-</span>exists <span class="token comment"># always never</span>
  <span class="token key atrule">environment</span><span class="token punctuation">:</span>
    <span class="token key atrule">KEY</span><span class="token punctuation">:</span> VALUE
  <span class="token key atrule">commands</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> echo $KEY
    <span class="token punctuation">-</span> pwd
    <span class="token punctuation">-</span> ls
    <span class="token punctuation">-</span> CGO_ENABLED=0 GOOS=linux go build <span class="token punctuation">-</span>a <span class="token punctuation">-</span>installsuffix cgo <span class="token punctuation">-</span>o app .
    <span class="token punctuation">-</span> ./app

<span class="token key atrule">trigger</span><span class="token punctuation">:</span>
  <span class="token key atrule">branch</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在目录结构如下</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">.</span>
├── .drone.yml
└── app.go
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="推送项目源代码到-github" tabindex="-1"><a class="header-anchor" href="#推送项目源代码到-github"><span>推送项目源代码到 GitHub</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>

$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;test drone ci&quot;</span>

$ <span class="token function">git</span> push origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="查看项目构建过程及结果" tabindex="-1"><a class="header-anchor" href="#查看项目构建过程及结果"><span>查看项目构建过程及结果</span></a></h2><p>打开我们部署好的 <code>Drone</code> 网站或者 Drone Cloud，即可看到构建结果。</p><figure><img src="`+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当然我们也可以把构建结果上传到 GitHub，Docker Registry，云服务商提供的对象存储，或者生产环境中。</p>',16)),e("p",null,[n[8]||(n[8]=s("本书 GitBook 也使用 Drone 进行 CI/CD，具体配置信息请查看本书根目录 ")),e("a",v,[n[7]||(n[7]=e("code",null,".drone.yml",-1)),a(o)]),n[9]||(n[9]=s(" 文件。"))]),n[15]||(n[15]=e("h2",{id:"参考链接",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#参考链接"},[e("span",null,"参考链接")])],-1)),e("ul",null,[e("li",null,[e("a",b,[n[10]||(n[10]=s("Drone Github")),a(o)])]),e("li",null,[e("a",g,[n[11]||(n[11]=s("Drone 文档")),a(o)])]),e("li",null,[e("a",h,[n[12]||(n[12]=s("Drone 示例")),a(o)])])])])}const C=d(m,[["render",f],["__file","index.html.vue"]]),G=JSON.parse('{"path":"/index/Docker/cases/ci/drone/","title":"Drone","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"Drone 关联项目","slug":"drone-关联项目","link":"#drone-关联项目","children":[]},{"level":2,"title":"编写项目源代码","slug":"编写项目源代码","link":"#编写项目源代码","children":[]},{"level":2,"title":"推送项目源代码到 GitHub","slug":"推送项目源代码到-github","link":"#推送项目源代码到-github","children":[]},{"level":2,"title":"查看项目构建过程及结果","slug":"查看项目构建过程及结果","link":"#查看项目构建过程及结果","children":[]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"git":{"createdTime":1731129855000,"updatedTime":1731129855000,"contributors":[{"name":"dkyg666","email":"43946866+dkyg666@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":1.49,"words":447},"filePathRelative":"index/Docker/cases/ci/drone/README.md","localizedDate":"2024年11月9日","excerpt":"\\n<p>基于 <code>Docker</code> 的 <code>CI/CD</code> 工具 <code>Drone</code> 所有编译、测试的流程都在 <code>Docker</code> 容器中进行。</p>\\n<p>开发者只需在项目中包含 <code>.drone.yml</code> 文件，将代码推送到 git 仓库，<code>Drone</code> 就能够自动化的进行编译、测试、发布。</p>\\n<p>本小节以 <code>GitHub</code> + <code>Drone</code> 来演示 <code>Drone</code> 的工作流程。当然在实际开发过程中，你的代码也许不在 GitHub 托管，那么你可以尝试使用 <code>Gogs</code> + <code>Drone</code> 来进行 <code>CI/CD</code>。</p>"}');export{C as comp,G as data};
