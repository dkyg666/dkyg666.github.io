import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as l,c as p,e,b as n,d as a,a as r,w as i,r as c}from"./app-DFk01ace.js";const d={};function b(u,s){const o=c("RouteLink");return l(),p("div",null,[s[10]||(s[10]=e(`<h1 id="容器互联" tabindex="-1"><a class="header-anchor" href="#容器互联"><span>容器互联</span></a></h1><p>如果你之前有 <code>Docker</code> 使用经验，你可能已经习惯了使用 <code>--link</code> 参数来使容器互联。</p><p>随着 Docker 网络的完善，强烈建议大家将容器加入自定义的 Docker 网络来连接多个容器，而不是使用 <code>--link</code> 参数。</p><h2 id="新建网络" tabindex="-1"><a class="header-anchor" href="#新建网络"><span>新建网络</span></a></h2><p>下面先创建一个新的 Docker 网络。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> network create <span class="token parameter variable">-d</span> bridge my-net
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,6)),n("p",null,[s[1]||(s[1]=n("code",null,"-d",-1)),s[2]||(s[2]=a(" 参数指定 Docker 网络类型，有 ")),s[3]||(s[3]=n("code",null,"bridge",-1)),s[4]||(s[4]=a()),s[5]||(s[5]=n("code",null,"overlay",-1)),s[6]||(s[6]=a("。其中 ")),s[7]||(s[7]=n("code",null,"overlay",-1)),s[8]||(s[8]=a(" 网络类型用于 ")),r(o,{to:"/index/Docker/swarm_mode/"},{default:i(()=>s[0]||(s[0]=[a("Swarm mode")])),_:1}),s[9]||(s[9]=a("，在本小节中你可以忽略它。"))]),s[11]||(s[11]=e(`<h2 id="连接容器" tabindex="-1"><a class="header-anchor" href="#连接容器"><span>连接容器</span></a></h2><p>运行一个容器并连接到新建的 <code>my-net</code> 网络</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> <span class="token parameter variable">--name</span> busybox1 <span class="token parameter variable">--network</span> my-net busybox <span class="token function">sh</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>打开新的终端，再运行一个容器并加入到 <code>my-net</code> 网络</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> <span class="token parameter variable">--name</span> busybox2 <span class="token parameter variable">--network</span> my-net busybox <span class="token function">sh</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>再打开一个新的终端查看容器信息</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> container <span class="token function">ls</span>

CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
b47060aca56b        busybox             <span class="token string">&quot;sh&quot;</span>                <span class="token number">11</span> minutes ago      Up <span class="token number">11</span> minutes                           busybox2
8720575823ec        busybox             <span class="token string">&quot;sh&quot;</span>                <span class="token number">16</span> minutes ago      Up <span class="token number">16</span> minutes                           busybox1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面通过 <code>ping</code> 来证明 <code>busybox1</code> 容器和 <code>busybox2</code> 容器建立了互联关系。</p><p>在 <code>busybox1</code> 容器输入以下命令</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>/ <span class="token comment"># ping busybox2</span>
PING busybox2 <span class="token punctuation">(</span><span class="token number">172.19</span>.0.3<span class="token punctuation">)</span>: <span class="token number">56</span> data bytes
<span class="token number">64</span> bytes from <span class="token number">172.19</span>.0.3: <span class="token assign-left variable">seq</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.072</span> ms
<span class="token number">64</span> bytes from <span class="token number">172.19</span>.0.3: <span class="token assign-left variable">seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.118</span> ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用 ping 来测试连接 <code>busybox2</code> 容器，它会解析成 <code>172.19.0.3</code>。</p><p>同理在 <code>busybox2</code> 容器执行 <code>ping busybox1</code>，也会成功连接到。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>/ <span class="token comment"># ping busybox1</span>
PING busybox1 <span class="token punctuation">(</span><span class="token number">172.19</span>.0.2<span class="token punctuation">)</span>: <span class="token number">56</span> data bytes
<span class="token number">64</span> bytes from <span class="token number">172.19</span>.0.2: <span class="token assign-left variable">seq</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.064</span> ms
<span class="token number">64</span> bytes from <span class="token number">172.19</span>.0.2: <span class="token assign-left variable">seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.143</span> ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，<code>busybox1</code> 容器和 <code>busybox2</code> 容器建立了互联关系。</p><h2 id="docker-compose" tabindex="-1"><a class="header-anchor" href="#docker-compose"><span>Docker Compose</span></a></h2><p>如果你有多个容器之间需要互相连接，推荐使用 <a href="../compose">Docker Compose</a>。</p>`,16))])}const v=t(d,[["render",b],["__file","linking.html.vue"]]),g=JSON.parse('{"path":"/index/Docker/network/linking.html","title":"容器互联","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"新建网络","slug":"新建网络","link":"#新建网络","children":[]},{"level":2,"title":"连接容器","slug":"连接容器","link":"#连接容器","children":[]},{"level":2,"title":"Docker Compose","slug":"docker-compose","link":"#docker-compose","children":[]}],"git":{"createdTime":1731129855000,"updatedTime":1731129855000,"contributors":[{"name":"dkyg666","email":"43946866+dkyg666@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":1.39,"words":418},"filePathRelative":"index/Docker/network/linking.md","localizedDate":"2024年11月9日","excerpt":"\\n<p>如果你之前有 <code>Docker</code> 使用经验，你可能已经习惯了使用 <code>--link</code> 参数来使容器互联。</p>\\n<p>随着 Docker 网络的完善，强烈建议大家将容器加入自定义的 Docker 网络来连接多个容器，而不是使用 <code>--link</code> 参数。</p>\\n<h2>新建网络</h2>\\n<p>下面先创建一个新的 Docker 网络。</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code>$ <span class=\\"token function\\">docker</span> network create <span class=\\"token parameter variable\\">-d</span> bridge my-net\\n</code></pre></div>"}');export{v as comp,g as data};
