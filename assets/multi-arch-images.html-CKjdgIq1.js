import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c,b as n,d as s,a,w as p,r as l,e as r}from"./app-DFk01ace.js";const u={},m={href:"https://github.com/moby/buildkit/blob/master/docs/buildkitd.toml.md",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/docker-practice/buildx",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/docker-practice/buildx",target:"_blank",rel:"noopener noreferrer"};function v(g,e){const d=l("RouteLink"),i=l("ExternalLinkIcon");return t(),c("div",null,[e[17]||(e[17]=n("h1",{id:"使用-buildx-构建多种系统架构支持的-docker-镜像",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#使用-buildx-构建多种系统架构支持的-docker-镜像"},[n("span",null,"使用 buildx 构建多种系统架构支持的 Docker 镜像")])],-1)),n("p",null,[e[1]||(e[1]=s("在之前的版本中构建多种系统架构支持的 Docker 镜像，要想使用统一的名字必须使用 ")),a(d,{to:"/index/Docker/image/manifest.html"},{default:p(()=>e[0]||(e[0]=[n("code",null,"$ docker manifest",-1)])),_:1}),e[2]||(e[2]=s(" 命令。"))]),e[18]||(e[18]=r(`<p>在 Docker 19.03+ 版本中可以使用 <code>$ docker buildx build</code> 命令使用 <code>BuildKit</code> 构建镜像。该命令支持 <code>--platform</code> 参数可以同时构建支持多种系统架构的 Docker 镜像，大大简化了构建步骤。</p><h2 id="新建-builder-实例" tabindex="-1"><a class="header-anchor" href="#新建-builder-实例"><span>新建 <code>builder</code> 实例</span></a></h2><p>Docker for Linux 不支持构建 <code>arm</code> 架构镜像，我们可以运行一个新的容器让其支持该特性，Docker 桌面版无需进行此项设置。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">--rm</span> <span class="token parameter variable">--privileged</span> tonistiigi/binfmt:latest <span class="token parameter variable">--install</span> all
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4)),n("p",null,[e[5]||(e[5]=s("由于 Docker 默认的 ")),e[6]||(e[6]=n("code",null,"builder",-1)),e[7]||(e[7]=s(" 实例不支持同时指定多个 ")),e[8]||(e[8]=n("code",null,"--platform",-1)),e[9]||(e[9]=s("，我们必须首先创建一个新的 ")),e[10]||(e[10]=n("code",null,"builder",-1)),e[11]||(e[11]=s(" 实例。同时由于国内拉取镜像较缓慢，我们可以使用配置了 ")),n("a",m,[e[3]||(e[3]=s("镜像加速地址")),a(i)]),e[12]||(e[12]=s(" 的 ")),n("a",k,[e[4]||(e[4]=n("code",null,"dockerpracticesig/buildkit:master",-1)),a(i)]),e[13]||(e[13]=s(" 镜像替换官方镜像。"))]),n("blockquote",null,[n("p",null,[e[15]||(e[15]=s("如果你有私有的镜像加速器，可以基于 ")),n("a",b,[e[14]||(e[14]=s("https://github.com/docker-practice/buildx")),a(i)]),e[16]||(e[16]=s(" 构建自己的 buildkit 镜像并使用它。"))])]),e[19]||(e[19]=r(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 适用于国内环境</span>
$ <span class="token function">docker</span> buildx create <span class="token parameter variable">--use</span> <span class="token parameter variable">--name</span><span class="token operator">=</span>mybuilder-cn <span class="token parameter variable">--driver</span> docker-container --driver-opt <span class="token assign-left variable">image</span><span class="token operator">=</span>dockerpracticesig/buildkit:master

<span class="token comment"># 适用于腾讯云环境(腾讯云主机、coding.net 持续集成)</span>
$ <span class="token function">docker</span> buildx create <span class="token parameter variable">--use</span> <span class="token parameter variable">--name</span><span class="token operator">=</span>mybuilder-cn <span class="token parameter variable">--driver</span> docker-container --driver-opt <span class="token assign-left variable">image</span><span class="token operator">=</span>dockerpracticesig/buildkit:master-tencent

<span class="token comment"># $ docker buildx create --name mybuilder --driver docker-container</span>

$ <span class="token function">docker</span> buildx use mybuilder
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="构建镜像" tabindex="-1"><a class="header-anchor" href="#构建镜像"><span>构建镜像</span></a></h2><p>新建 Dockerfile 文件。</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> <span class="token options"><span class="token property">--platform</span><span class="token punctuation">=</span><span class="token string">$TARGETPLATFORM</span></span> alpine</span>

<span class="token instruction"><span class="token keyword">RUN</span> uname -a &gt; /os.txt</span>

<span class="token instruction"><span class="token keyword">CMD</span> cat /os.txt</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>$ docker buildx build</code> 命令构建镜像，注意将 <code>myusername</code> 替换为自己的 Docker Hub 用户名。</p><p><code>--push</code> 参数表示将构建好的镜像推送到 Docker 仓库。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> buildx build <span class="token parameter variable">--platform</span> linux/arm,linux/arm64,linux/amd64 <span class="token parameter variable">-t</span> myusername/hello <span class="token builtin class-name">.</span> <span class="token parameter variable">--push</span>

<span class="token comment"># 查看镜像信息</span>
$ <span class="token function">docker</span> buildx imagetools inspect myusername/hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在不同架构运行该镜像，可以得到该架构的信息。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># arm</span>
$ <span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> myusername/hello
Linux buildkitsandbox <span class="token number">4.9</span>.125-linuxkit <span class="token comment">#1 SMP Fri Sep 7 08:20:28 UTC 2018 armv7l Linux</span>

<span class="token comment"># arm64</span>
$ <span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> myusername/hello
Linux buildkitsandbox <span class="token number">4.9</span>.125-linuxkit <span class="token comment">#1 SMP Fri Sep 7 08:20:28 UTC 2018 aarch64 Linux</span>

<span class="token comment"># amd64</span>
$ <span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> myusername/hello
Linux buildkitsandbox <span class="token number">4.9</span>.125-linuxkit <span class="token comment">#1 SMP Fri Sep 7 08:20:28 UTC 2018 x86_64 Linux</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="架构相关变量" tabindex="-1"><a class="header-anchor" href="#架构相关变量"><span>架构相关变量</span></a></h2><p><code>Dockerfile</code> 支持如下架构相关的变量</p><p><strong>TARGETPLATFORM</strong></p><p>构建镜像的目标平台，例如 <code>linux/amd64</code>, <code>linux/arm/v7</code>, <code>windows/amd64</code>。</p><p><strong>TARGETOS</strong></p><p><code>TARGETPLATFORM</code> 的 OS 类型，例如 <code>linux</code>, <code>windows</code></p><p><strong>TARGETARCH</strong></p><p><code>TARGETPLATFORM</code> 的架构类型，例如 <code>amd64</code>, <code>arm</code></p><p><strong>TARGETVARIANT</strong></p><p><code>TARGETPLATFORM</code> 的变种，该变量可能为空，例如 <code>v7</code></p><p><strong>BUILDPLATFORM</strong></p><p>构建镜像主机平台，例如 <code>linux/amd64</code></p><p><strong>BUILDOS</strong></p><p><code>BUILDPLATFORM</code> 的 OS 类型，例如 <code>linux</code></p><p><strong>BUILDARCH</strong></p><p><code>BUILDPLATFORM</code> 的架构类型，例如 <code>amd64</code></p><p><strong>BUILDVARIANT</strong></p><p><code>BUILDPLATFORM</code> 的变种，该变量可能为空，例如 <code>v7</code></p><h3 id="使用举例" tabindex="-1"><a class="header-anchor" href="#使用举例"><span>使用举例</span></a></h3><p>例如我们要构建支持 <code>linux/arm/v7</code> 和 <code>linux/amd64</code> 两种架构的镜像。假设已经生成了两个平台对应的二进制文件：</p><ul><li><code>bin/dist-linux-arm</code></li><li><code>bin/dist-linux-amd64</code></li></ul><p>那么 <code>Dockerfile</code> 可以这样书写：</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> scratch</span>

<span class="token comment"># 使用变量必须申明</span>
<span class="token instruction"><span class="token keyword">ARG</span> TARGETOS</span>

<span class="token instruction"><span class="token keyword">ARG</span> TARGETARCH</span>

<span class="token instruction"><span class="token keyword">COPY</span> bin/dist-<span class="token variable">\${TARGETOS}</span>-<span class="token variable">\${TARGETARCH}</span> /dist</span>

<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">&quot;dist&quot;</span>]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32))])}const f=o(u,[["render",v],["__file","multi-arch-images.html.vue"]]),T=JSON.parse('{"path":"/index/Docker/buildx/multi-arch-images.html","title":"使用 buildx 构建多种系统架构支持的 Docker 镜像","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"新建 builder 实例","slug":"新建-builder-实例","link":"#新建-builder-实例","children":[]},{"level":2,"title":"构建镜像","slug":"构建镜像","link":"#构建镜像","children":[]},{"level":2,"title":"架构相关变量","slug":"架构相关变量","link":"#架构相关变量","children":[{"level":3,"title":"使用举例","slug":"使用举例","link":"#使用举例","children":[]}]}],"git":{"createdTime":1731129855000,"updatedTime":1731129855000,"contributors":[{"name":"dkyg666","email":"43946866+dkyg666@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":2.39,"words":718},"filePathRelative":"index/Docker/buildx/multi-arch-images.md","localizedDate":"2024年11月9日","excerpt":"\\n<p>在之前的版本中构建多种系统架构支持的 Docker 镜像，要想使用统一的名字必须使用 <a href=\\"/index/Docker/image/manifest.html\\" target=\\"_blank\\"><code>$ docker manifest</code></a> 命令。</p>\\n<p>在 Docker 19.03+ 版本中可以使用 <code>$ docker buildx build</code> 命令使用 <code>BuildKit</code> 构建镜像。该命令支持 <code>--platform</code> 参数可以同时构建支持多种系统架构的 Docker 镜像，大大简化了构建步骤。</p>"}');export{f as comp,T as data};
