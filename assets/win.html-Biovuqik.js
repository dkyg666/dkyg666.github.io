import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,e as i,b as s,d as a,a as t,w as g,r as e,o as u}from"./app-7pmo0-8W.js";const c="/img/build/build02.jpeg",b="/img/build/build01.jpeg",m="/img/build/build03.gif",v="/img/build/build04.gif",k="/img/build/build05.gif",f="/img/build/build06.png",h="/img/build/build07.png",x="/img/build/build08.png",w="/img/build/build09.png",q="/img/build/build10.gif",y="/img/build/build11.gif",z="/img/build/build12.gif",A={},N={href:"https://github.com/alist-org/alist/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},_={class:"hint-container tip"},C={href:"https://alist.nn.ci/zh/config/configuration.html#bleve-dir",target:"_blank",rel:"noopener noreferrer"},B={href:"https://git-scm.com/download/win",target:"_blank",rel:"noopener noreferrer"},G={href:"https://golang.org/doc/install",target:"_blank",rel:"noopener noreferrer"},O={href:"https://gcc.gnu.org/",target:"_blank",rel:"noopener noreferrer"},T={href:"https://nodejs.org/",target:"_blank",rel:"noopener noreferrer"},$={href:"https://www.npmjs.com/package/pnpm",target:"_blank",rel:"noopener noreferrer"},R={href:"https://github.com/alist-org/alist/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},L={href:"https://crowdin.com/project/alist/zh-CN",target:"_blank",rel:"noopener noreferrer"},V={href:"https://crowdin.com/backend/download/project/alist/zh-CN.zip",target:"_blank",rel:"noopener noreferrer"},j={href:"http://run.sh",target:"_blank",rel:"noopener noreferrer"};function I(X,n){const l=e("ExternalLinkIcon"),r=e("RouteLink"),o=e("Badge");return u(),d("div",null,[n[33]||(n[33]=i('<p>有的小伙伴想着自己编译一下 Alist<br> 不管是出于自己想折腾还是自己想改改源码哩.大家都可以编译~ (๑•́₃ •)</p><h2 id="windows版本编译教程" tabindex="-1"><a class="header-anchor" href="#windows版本编译教程"><span>Windows版本编译教程</span></a></h2><h2 id="_1-编译前准备" tabindex="-1"><a class="header-anchor" href="#_1-编译前准备"><span>1.编译前准备</span></a></h2><h3 id="_1-2-编译之前的前提条件" tabindex="-1"><a class="header-anchor" href="#_1-2-编译之前的前提条件"><span>1.2 编译之前的前提条件</span></a></h3>',4)),s("p",null,[n[1]||(n[1]=a("大家可以看一下这里需要啥：")),s("a",N,[n[0]||(n[0]=a("https://github.com/alist-org/alist/blob/main/CONTRIBUTING.md")),t(l)])]),n[34]||(n[34]=s("p",null,"编译AList Go竟然需要 1.20+了...呜呜呜",-1)),n[35]||(n[35]=s("p",null,"我没记错前几个月才升级了1.18+...升级真快(´◔‸◔')”",-1)),s("div",_,[n[11]||(n[11]=s("p",{class:"hint-container-title"},"提示",-1)),s("p",null,[n[3]||(n[3]=a("这样的编译的似乎只有一个版本，如果你想要像AList官方那样编译很多可以使用 ")),t(r,{to:"/index/Alist/build/github.html"},{default:g(()=>n[2]||(n[2]=[a("GitHub Actions")])),_:1}),n[4]||(n[4]=a(" 来进行编译"))]),s("ul",null,[s("li",null,[n[7]||(n[7]=a("如果你只有修改前端的想法，")),n[8]||(n[8]=s("mark",null,[s("strong",null,"强烈推荐")],-1)),n[9]||(n[9]=a(" 单独只进行编译前端即可，后端(二进制)应用程序继续使用AList官方原版的文件 ")),s("ul",null,[s("li",null,[n[6]||(n[6]=a("因为现在支持引用第三方前端文件使用：参考 ")),s("a",C,[n[5]||(n[5]=a("https://alist.nn.ci/zh/config/configuration.html#bleve-dir")),t(l)])])])]),n[10]||(n[10]=s("li",null,"这样就不用担心设备不同不会交叉编译，以及编译过程中出现的问题无法解决",-1))])]),n[36]||(n[36]=s("p",null,[s("strong",null,"编译之前我们需要先准备安装好以下软件:")],-1)),s("ol",null,[s("li",null,[s("a",B,[n[12]||(n[12]=s("strong",null,"git",-1)),t(l)])]),s("li",null,[s("a",G,[n[13]||(n[13]=s("strong",null,"golang 1.20+",-1)),t(l)])]),s("li",null,[s("a",O,[n[14]||(n[14]=s("strong",null,"gcc",-1)),t(l)])]),s("li",null,[s("a",T,[n[15]||(n[15]=s("strong",null,"nodejs",-1)),t(l)])]),s("li",null,[s("a",$,[n[16]||(n[16]=s("strong",null,"pnpm",-1)),t(l)])])]),n[37]||(n[37]=i(`<p>以上安装过程我就不赘述了...<strong>（安装问题都解决不了的话编译也够呛）</strong></p><p>以上软件安装好后我们先把 <strong>Go的代理改为国内</strong> 的..</p><p>安装好Golang后并且也将 &quot;<strong>环境变量&quot;</strong> 配置好，然后win+R 输入CMD打开DDos黑窗口(这里是用的Windows)</p><p>根据自己的配置输入：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go <span class="token function">env</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://goproxy.cn,direct      // Windows
<span class="token builtin class-name">export</span> <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://goproxy.cn,direct         // macOS 或 Linux
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>将代理改为国内,不然编译时会出错,前人血泪史之一... <strong>（踩坑一号）</strong></p><p><strong>然后我们改好后看看生效没有：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>CMD黑窗口输入go env查看（需要配置好环境变量哦先）

安装好默认的是：
<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span><span class="token string">&quot;https://proxy.golang.org,direct&quot;</span>
修改代理后是
<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://goproxy.cn,direct
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>反正不管他默认的是啥，改就完事了！！！</strong></p><p><strong>以上就是编译前需要的准备 安装好5个软件，改一下代理 ..不难吧(ฅ&#39;ω&#39;ฅ)</strong></p><h3 id="_1-3-编译前端前准备" tabindex="-1"><a class="header-anchor" href="#_1-3-编译前端前准备"><span>1.3 编译前端前准备</span></a></h3>`,11)),s("p",null,[n[18]||(n[18]=s("strong",null,"编译前我们看看文档怎么编译",-1)),n[19]||(n[19]=a("：")),s("a",R,[n[17]||(n[17]=a("https://github.com/alist-org/alist/blob/main/CONTRIBUTING.md")),t(l)])]),n[38]||(n[38]=i('<figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们需要编译前肯定是要先克隆一下<strong>前端</strong>和<strong>后端</strong>的代码（clone）</p><p>执行图上的两行命令在我们安装的 <strong>git</strong> 终端里面</p><figure><img src="'+b+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>你克隆到任意地方都行建议放到一个文件夹里面去,这样我们修改的时候也方便</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>alist.git是后端，alist-web.git是前端
无代理
<span class="token function">git</span> clone https://github.com/alist-org/alist.git
<span class="token function">git</span> clone --recurse-submodules https://github.com/alist-org/alist-web.git

代理 - （大白提供-可能服务中断了）
<span class="token function">git</span> clone https://hub.cooluc.com/alist-org/alist.git
<span class="token function">git</span> clone --recurse-submodules https://hub.cooluc.com/alist-org/alist-web.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前后端 拉取/克隆(clone)好了</p><p>但是我们拉取/克隆(clone)下来的前端里面只有一个 默认的英文语言文件</p><p>我们还需要去下载一个带中文的语言文件</p><h3 id="_1-4-手动下载语言包地址" tabindex="-1"><a class="header-anchor" href="#_1-4-手动下载语言包地址"><span>1.4 手动下载语言包地址</span></a></h3>`,10)),s("p",null,[s("strong",null,[s("a",L,[n[20]||(n[20]=a("https://crowdin.com/project/alist/zh-CN")),t(l)])])]),n[39]||(n[39]=s("p",null,"这里是手动下载，还有命令自动下的哪个我没研究明白...害,卡了好几天了这个语言文件..",-1)),n[40]||(n[40]=s("figure",null,[s("img",{src:m,alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1)),n[41]||(n[41]=s("figure",null,[s("img",{src:v,alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1)),n[42]||(n[42]=s("h3",{id:"_1-5-直接下载语言包直链",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-5-直接下载语言包直链"},[s("span",null,"1.5 直接下载语言包直链：")])],-1)),s("p",null,[s("strong",null,[s("a",V,[n[21]||(n[21]=a("https://crowdin.com/backend/download/project/alist/zh-CN.zip")),t(l)])])]),n[43]||(n[43]=i(`<p>上面的语言文件放进去后我们去终端里面输入命令：</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>node ./scripts/i18n.mjs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行完毕语言里面会出现一个 <strong>entry.ts</strong> 的文件，这样我们就可以用了</p><figure><img src="`+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>以上软件安装并且配置好环境变量了，Go 代理设置好了，语言包文件下载好了 ，我们编译前准备工作就可以了</p><h2 id="_2-编译前端" tabindex="-1"><a class="header-anchor" href="#_2-编译前端"><span>2.编译前端</span></a></h2><p>首先CD进入 <strong><code>alist-web</code></strong> 前端文件夹内，</p><p>然后输入 <strong>pnpm install</strong> 将 <strong>node_modules</strong> （包管理工具下载安装的包的文件夹），下载下来，</p><p>别问问什么不用 <strong>npm</strong> 要用 <strong>pnpm</strong> ...问就是用 <strong>pnpm</strong> 就完了...这个也是血的教训.. <strong>%&gt;_&lt;% <sup>（踩坑2号）</sup></strong></p><p>中间自己改源码的过程就不演示了，自己想怎么改就怎怎么改</p><p>改完了 执行如下命令将前端文件进行编译： <strong><code>pnpm build</code></strong> <strong><code>npm run build</code></strong> 这两个二选一都行</p>',11)),s("p",null,[n[22]||(n[22]=a("编译好后，会看到一个叫 ")),t(o,{text:"dist",type:"info"}),n[23]||(n[23]=a(" 的文件夹，这个就是我们编译好的内容一会我们移动到后端里面去"))]),n[44]||(n[44]=i('<figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-1-编译前端期间可能会遇到的问题" tabindex="-1"><a class="header-anchor" href="#_2-1-编译前端期间可能会遇到的问题"><span>2.1 编译前端期间可能会遇到的问题</span></a></h3><h4 id="输入pnpm-install会报错-三号坑" tabindex="-1"><a class="header-anchor" href="#输入pnpm-install会报错-三号坑"><span>输入<code>pnpm install</code>会报错 <sup>(三号坑)</sup></span></a></h4><h4 id="如果你输入-pnpm-install-出现如下图中的错误" tabindex="-1"><a class="header-anchor" href="#如果你输入-pnpm-install-出现如下图中的错误"><span>如果你输入 pnpm install 出现如下图中的错误</span></a></h4><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="上述报错中的解决方案" tabindex="-1"><a class="header-anchor" href="#上述报错中的解决方案"><span>上述报错中的解决方案</span></a></h4><figure><img src="'+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果没出现上述的错误能正常编译 忽略即可！</p><h4 id="输入-pnpm-install-会报错-四号坑" tabindex="-1"><a class="header-anchor" href="#输入-pnpm-install-会报错-四号坑"><span>输入 pnpm install 会报错 (四号坑)</span></a></h4><h4 id="如果你输入-pnpm-install-出现如下图中的错误-1" tabindex="-1"><a class="header-anchor" href="#如果你输入-pnpm-install-出现如下图中的错误-1"><span>如果你输入 pnpm install 出现如下图中的错误</span></a></h4><figure><img src="'+w+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>上述问题的问题所在以及解决方案</strong></p><p>问题所在</p><ul><li><p>看看你前端的 <strong><code> solid-router</code></strong> 这个文件夹里面是不是空的..估计是空的</p></li><li><p>下载前端的时候没有带 <code>--recurse-submodules</code> 参数导致附属的文件没有下载下来</p></li></ul><p>解决方案</p><ul><li>下载前端带上 <code>--recurse-submodules</code> 参数去下载</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> clone --recurse-submodules https://github.com/alist-org/alist-web.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_3-编译后端" tabindex="-1"><a class="header-anchor" href="#_3-编译后端"><span>3.编译后端</span></a></h2><ol><li>在前端编译好后我们就会看到一个 <strong><code>&quot;dist&quot;</code></strong> 的文件夹</li><li>我们移动一下把 <strong><code>&quot;dist&quot;</code></strong> 目录移动到的后端的 <strong><code>&quot;public&quot;</code></strong> 目录里面去即可</li><li>虽然里面已经有了一个 <strong>&quot;dist&quot;</strong> 文件夹，不用管直接覆盖</li></ol><figure><img src="`+q+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>将编译好的前端移文件动到后端里面去，准备编译</p><p><strong>&quot;dist&quot;</strong> 目录移动到 <strong><code>&quot;public&quot;</code></strong> 去之后，我们就可以编译了（如果有改代码的需求自己改完再编译）</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token assign-left variable">appName</span><span class="token operator">=</span><span class="token string">&quot;alist&quot;</span>
<span class="token assign-left variable">builtAt</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +<span class="token string">&#39;%F %T %z&#39;</span><span class="token variable">)</span></span>&quot;</span>
<span class="token assign-left variable">goVersion</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>go version <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&#39;s/go version //&#39;</span><span class="token variable">)</span></span>
<span class="token assign-left variable">gitAuthor</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> show <span class="token parameter variable">-s</span> <span class="token parameter variable">--format</span><span class="token operator">=</span><span class="token string">&#39;format:%aN &lt;%ae&gt;&#39;</span> HEAD<span class="token variable">)</span></span>
<span class="token assign-left variable">gitCommit</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> log <span class="token parameter variable">--pretty</span><span class="token operator">=</span>format:<span class="token string">&quot;%h&quot;</span> <span class="token parameter variable">-1</span><span class="token variable">)</span></span>
<span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> describe <span class="token parameter variable">--long</span> <span class="token parameter variable">--tags</span> <span class="token parameter variable">--dirty</span> <span class="token parameter variable">--always</span><span class="token variable">)</span></span>
<span class="token assign-left variable">webVersion</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">wget</span> -qO- <span class="token parameter variable">-t1</span> <span class="token parameter variable">-T2</span> <span class="token string">&quot;https://api.github.com/repos/alist-org/alist-web/releases/latest&quot;</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&quot;tag_name&quot;</span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token parameter variable">-F</span> <span class="token string">&quot;:&quot;</span> <span class="token string">&#39;{print $2}&#39;</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&#39;s/\\&quot;//g;s/,//g;s/ //g&#39;</span><span class="token variable">)</span></span>
<span class="token assign-left variable">ldflags</span><span class="token operator">=</span><span class="token string">&quot;\\
-w -s \\
-X &#39;github.com/alist-org/alist/v3/internal/conf.BuiltAt=<span class="token variable">$builtAt</span>&#39; \\
-X &#39;github.com/alist-org/alist/v3/internal/conf.GoVersion=<span class="token variable">$goVersion</span>&#39; \\
-X &#39;github.com/alist-org/alist/v3/internal/conf.GitAuthor=<span class="token variable">$gitAuthor</span>&#39; \\
-X &#39;github.com/alist-org/alist/v3/internal/conf.GitCommit=<span class="token variable">$gitCommit</span>&#39; \\
-X &#39;github.com/alist-org/alist/v3/internal/conf.Version=<span class="token variable">$version</span>&#39; \\
-X &#39;github.com/alist-org/alist/v3/internal/conf.WebVersion=<span class="token variable">$webVersion</span>&#39; \\
&quot;</span>
go build <span class="token parameter variable">-ldflags</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">$ldflags</span>&quot;</span> <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有人看到这么一大坨这怎么执行...我们可以创建一个 &quot; <strong>.sh</strong>&quot; 后缀的文件，然后把这一坨复制粘贴进去即可</p><p>‪如果怕自己创建的 <strong>.sh</strong> 后缀 文件不能用我们可以复制粘贴一个已经有的然后把里面的内容替换了即可</p><h3 id="_3-1-演示创建-sh" tabindex="-1"><a class="header-anchor" href="#_3-1-演示创建-sh"><span>3.1 <a href="#_3-1-%E6%BC%94%E7%A4%BA%E5%88%9B%E5%BB%BA-sh">演示创建.sh</a></span></a></h3><figure><img src="`+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',27)),s("p",null,[n[25]||(n[25]=a("我们创建好了，")),n[26]||(n[26]=s("strong",null,"可以直接双击执行",-1)),n[27]||(n[27]=a("，或者在命令行运行 这个我们刚刚修改的 ")),s("strong",null,[s("a",j,[n[24]||(n[24]=a("run.sh")),t(l)])]),n[28]||(n[28]=a(" 文件也行"))]),s("p",null,[n[29]||(n[29]=a("运行好了 ")),n[30]||(n[30]=s("strong",null,"（可能大概需要1-2分钟）",-1)),n[31]||(n[31]=a(" 目录里面会出现一个")),t(o,{text:"alist.exe",type:"info"}),n[32]||(n[32]=a(" 的文件 这就是编译好了"))]),n[45]||(n[45]=s("p",null,"我这里的Windows自然是.exe后缀的，如果是Linux，那肯定出现的是二进制文件",-1)),n[46]||(n[46]=s("figure",null,[s("img",{src:z,alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1)),n[47]||(n[47]=s("p",null,[a("‪好了，以上教程就是本次编译的教程啦... 想折腾的自己折腾吧...有想试试的 可以试试看..."),s("strong",null,"(‾◡◝)")],-1)),n[48]||(n[48]=s("hr",null,null,-1))])}const E=p(A,[["render",I],["__file","win.html.vue"]]),P=JSON.parse('{"path":"/index/Alist/build/win.html","title":"Windows编译教程","lang":"zh-CN","frontmatter":{"title":"Windows编译教程","icon":null,"order":110,"author":null,"date":"2023-01-01T00:00:00.000Z","category":["使用指南"],"tag":["AList魔改教程","自己编译","编译AList教程","Build","Windows"],"sticky":true,"star":true,"headerDepth":6,"collapsible":false},"headers":[{"level":2,"title":"Windows版本编译教程","slug":"windows版本编译教程","link":"#windows版本编译教程","children":[]},{"level":2,"title":"1.编译前准备","slug":"_1-编译前准备","link":"#_1-编译前准备","children":[{"level":3,"title":"1.2 编译之前的前提条件","slug":"_1-2-编译之前的前提条件","link":"#_1-2-编译之前的前提条件","children":[]},{"level":3,"title":"1.3 编译前端前准备","slug":"_1-3-编译前端前准备","link":"#_1-3-编译前端前准备","children":[]},{"level":3,"title":"1.4 手动下载语言包地址","slug":"_1-4-手动下载语言包地址","link":"#_1-4-手动下载语言包地址","children":[]},{"level":3,"title":"1.5 直接下载语言包直链：","slug":"_1-5-直接下载语言包直链","link":"#_1-5-直接下载语言包直链","children":[]}]},{"level":2,"title":"2.编译前端","slug":"_2-编译前端","link":"#_2-编译前端","children":[{"level":3,"title":"2.1 编译前端期间可能会遇到的问题","slug":"_2-1-编译前端期间可能会遇到的问题","link":"#_2-1-编译前端期间可能会遇到的问题","children":[{"level":4,"title":"输入pnpm install会报错 (三号坑)","slug":"输入pnpm-install会报错-三号坑","link":"#输入pnpm-install会报错-三号坑","children":[]},{"level":4,"title":"如果你输入 pnpm install 出现如下图中的错误","slug":"如果你输入-pnpm-install-出现如下图中的错误","link":"#如果你输入-pnpm-install-出现如下图中的错误","children":[]},{"level":4,"title":"上述报错中的解决方案","slug":"上述报错中的解决方案","link":"#上述报错中的解决方案","children":[]},{"level":4,"title":"输入 pnpm install 会报错 (四号坑)","slug":"输入-pnpm-install-会报错-四号坑","link":"#输入-pnpm-install-会报错-四号坑","children":[]},{"level":4,"title":"如果你输入 pnpm install 出现如下图中的错误","slug":"如果你输入-pnpm-install-出现如下图中的错误-1","link":"#如果你输入-pnpm-install-出现如下图中的错误-1","children":[]}]}]},{"level":2,"title":"3.编译后端","slug":"_3-编译后端","link":"#_3-编译后端","children":[{"level":3,"title":"3.1 演示创建.sh","slug":"_3-1-演示创建-sh","link":"#_3-1-演示创建-sh","children":[]}]}],"git":{"createdTime":1731129855000,"updatedTime":1731129855000,"contributors":[{"name":"dkyg666","email":"43946866+dkyg666@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":6.44,"words":1932},"filePathRelative":"index/Alist/build/win.md","localizedDate":"2023年1月1日","excerpt":"<!-- 你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。 -->\\n"}');export{E as comp,P as data};
