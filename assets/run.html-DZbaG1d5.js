import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,e as a,b as n,d as s,a as i,w as t,r,o as p}from"./app-BwK79we4.js";const c={};function u(b,e){const l=r("RouteLink");return p(),o("div",null,[e[9]||(e[9]=a(`<h1 id="启动容器" tabindex="-1"><a class="header-anchor" href="#启动容器"><span>启动容器</span></a></h1><p>启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态（<code>exited</code>）的容器重新启动。</p><p>因为 Docker 的容器实在太轻量级了，很多时候用户都是随时删除和新创建容器。</p><h2 id="新建并启动" tabindex="-1"><a class="header-anchor" href="#新建并启动"><span>新建并启动</span></a></h2><p>所需要的命令主要为 <code>docker run</code>。</p><p>例如，下面的命令输出一个 “Hello World”，之后终止容器。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run ubuntu:18.04 /bin/echo <span class="token string">&#39;Hello world&#39;</span>
Hello world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这跟在本地直接执行 <code>/bin/echo &#39;hello world&#39;</code> 几乎感觉不出任何区别。</p><p>下面的命令则启动一个 bash 终端，允许用户进行交互。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-t</span> <span class="token parameter variable">-i</span> ubuntu:18.04 /bin/bash
root@af8bae53bdd3:/<span class="token comment">#</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>-t</code> 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， <code>-i</code> 则让容器的标准输入保持打开。</p><p>在交互模式下，用户可以通过所创建的终端来输入命令，例如</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>root@af8bae53bdd3:/<span class="token comment"># pwd</span>
/
root@af8bae53bdd3:/<span class="token comment"># ls</span>
bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当利用 <code>docker run</code> 来创建容器时，Docker 在后台运行的标准操作包括：</p>`,14)),n("ul",null,[n("li",null,[e[1]||(e[1]=s("检查本地是否存在指定的镜像，不存在就从 ")),i(l,{to:"/index/Docker/repository/"},{default:t(()=>e[0]||(e[0]=[s("registry")])),_:1}),e[2]||(e[2]=s(" 下载"))]),e[3]||(e[3]=n("li",null,"利用镜像创建并启动一个容器",-1)),e[4]||(e[4]=n("li",null,"分配一个文件系统，并在只读的镜像层外面挂载一层可读写层",-1)),e[5]||(e[5]=n("li",null,"从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去",-1)),e[6]||(e[6]=n("li",null,"从地址池配置一个 ip 地址给容器",-1)),e[7]||(e[7]=n("li",null,"执行用户指定的应用程序",-1)),e[8]||(e[8]=n("li",null,"执行完毕后容器被终止",-1))]),e[10]||(e[10]=a(`<h2 id="启动已终止容器" tabindex="-1"><a class="header-anchor" href="#启动已终止容器"><span>启动已终止容器</span></a></h2><p>可以利用 <code>docker container start</code> 命令，直接将一个已经终止（<code>exited</code>）的容器启动运行。</p><p>容器的核心为所执行的应用程序，所需要的资源都是应用程序运行所必需的。除此之外，并没有其它的资源。可以在伪终端中利用 <code>ps</code> 或 <code>top</code> 来查看进程信息。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>root@ba267838cc1b:/<span class="token comment"># ps</span>
  PID TTY          TIME CMD
    <span class="token number">1</span> ?        00:00:00 <span class="token function">bash</span>
   <span class="token number">11</span> ?        00:00:00 <span class="token function">ps</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见，容器中仅运行了指定的 bash 应用。这种特点使得 Docker 对资源的利用率极高，是货真价实的轻量级虚拟化。</p>`,5))])}const h=d(c,[["render",u],["__file","run.html.vue"]]),k=JSON.parse(`{"path":"/index/Docker/container/run.html","title":"启动容器","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"新建并启动","slug":"新建并启动","link":"#新建并启动","children":[]},{"level":2,"title":"启动已终止容器","slug":"启动已终止容器","link":"#启动已终止容器","children":[]}],"git":{"createdTime":1731129855000,"updatedTime":1731129855000,"contributors":[{"name":"dkyg666","email":"43946866+dkyg666@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":1.91,"words":574},"filePathRelative":"index/Docker/container/run.md","localizedDate":"2024年11月9日","excerpt":"\\n<p>启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态（<code>exited</code>）的容器重新启动。</p>\\n<p>因为 Docker 的容器实在太轻量级了，很多时候用户都是随时删除和新创建容器。</p>\\n<h2>新建并启动</h2>\\n<p>所需要的命令主要为 <code>docker run</code>。</p>\\n<p>例如，下面的命令输出一个 “Hello World”，之后终止容器。</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code>$ <span class=\\"token function\\">docker</span> run ubuntu:18.04 /bin/echo <span class=\\"token string\\">'Hello world'</span>\\nHello world\\n</code></pre></div>"}`);export{h as comp,k as data};
