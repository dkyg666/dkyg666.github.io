import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,e as n,b as a,d as s,a as d,o as c,r}from"./app-dX96qGh5.js";const p={},o={href:"https://github.com/etcd-io/etcd/releases",target:"_blank",rel:"noopener noreferrer"};function u(v,e){const i=r("ExternalLinkIcon");return c(),l("div",null,[e[6]||(e[6]=n('<h1 id="使用-etcdctl-v2" tabindex="-1"><a class="header-anchor" href="#使用-etcdctl-v2"><span>使用 etcdctl v2</span></a></h1><p><code>etcdctl</code> 是一个命令行客户端，它能提供一些简洁的命令，供用户直接跟 <code>etcd</code> 服务打交道，而无需基于 <code>HTTP API</code> 方式。这在某些情况下将很方便，例如用户对服务进行测试或者手动修改数据库内容。我们也推荐在刚接触 <code>etcd</code> 时通过 <code>etcdctl</code> 命令来熟悉相关的操作，这些操作跟 <code>HTTP API</code> 实际上是对应的。</p>',2)),a("p",null,[e[1]||(e[1]=a("code",null,"etcd",-1)),e[2]||(e[2]=s(" 项目二进制发行包中已经包含了 ")),e[3]||(e[3]=a("code",null,"etcdctl",-1)),e[4]||(e[4]=s(" 工具，没有的话，可以从 ")),a("a",o,[e[0]||(e[0]=s("github.com/etcd-io/etcd/releases")),d(i)]),e[5]||(e[5]=s(" 下载。"))]),e[7]||(e[7]=n(`<p><code>etcdctl</code> 支持如下的命令，大体上分为数据库操作和非数据库操作两类，后面将分别进行解释。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>$ etcdctl -h
NAME:
   etcdctl - A simple command line client for etcd.

USAGE:
   etcdctl [global options] command [command options] [arguments...]

VERSION:
   2.0.0-rc.1

COMMANDS:
   backup	backup an etcd directory
   mk		make a new key with a given value
   mkdir	make a new directory
   rm		remove a key
   rmdir	removes the key if it is an empty directory or a key-value pair
   get		retrieve the value of a key
   ls		retrieve a directory
   set		set the value of a key
   setdir	create a new or existing directory
   update	update an existing key with a given value
   updatedir	update an existing directory
   watch	watch a key for changes
   exec-watch	watch a key for changes and exec an executable
   member	member add, remove and list subcommands
   help, h	Shows a list of commands or help for one command

GLOBAL OPTIONS:
   --debug			output cURL commands which can be used to reproduce the request
   --no-sync			don&#39;t synchronize cluster information before sending request
   --output, -o &#39;simple&#39;	output response in the given format (\`simple\` or \`json\`)
   --peers, -C 			a comma-delimited list of machine addresses in the cluster (default: &quot;127.0.0.1:4001&quot;)
   --cert-file 			identify HTTPS client using this SSL certificate file
   --key-file 			identify HTTPS client using this SSL key file
   --ca-file 			verify certificates of HTTPS-enabled servers using this CA bundle
   --help, -h			show help
   --version, -v		print the version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据库操作" tabindex="-1"><a class="header-anchor" href="#数据库操作"><span>数据库操作</span></a></h2><p>数据库操作围绕对键值和目录的 CRUD （符合 REST 风格的一套操作：Create）完整生命周期的管理。</p><p>etcd 在键的组织上采用了层次化的空间结构（类似于文件系统中目录的概念），用户指定的键可以为单独的名字，如 <code>testkey</code>，此时实际上放在根目录 <code>/</code> 下面，也可以为指定目录结构，如 <code>cluster1/node2/testkey</code>，则将创建相应的目录结构。</p><p><em>注：CRUD 即 Create, Read, Update, Delete，是符合 REST 风格的一套 API 操作。</em></p><h3 id="set" tabindex="-1"><a class="header-anchor" href="#set"><span>set</span></a></h3><p>指定某个键的值。例如</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ etcdctl <span class="token builtin class-name">set</span> /testdir/testkey <span class="token string">&quot;Hello world&quot;</span>
Hello world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>支持的选项包括：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token parameter variable">--ttl</span> <span class="token string">&#39;0&#39;</span>			该键值的超时时间（单位为秒），不配置（默认为 <span class="token number">0</span>）则永不超时
--swap-with-value value 若该键现在的值是 value，则进行设置操作
--swap-with-index <span class="token string">&#39;0&#39;</span>	若该键现在的索引值是指定索引，则进行设置操作
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="get" tabindex="-1"><a class="header-anchor" href="#get"><span>get</span></a></h3><p>获取指定键的值。例如</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ etcdctl <span class="token builtin class-name">set</span> testkey hello
hello
$ etcdctl update testkey world
world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当键不存在时，则会报错。例如</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ etcdctl get testkey2
Error:  <span class="token number">100</span>: Key not found <span class="token punctuation">(</span>/testkey2<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>支持的选项为</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token parameter variable">--sort</span>	对结果进行排序
<span class="token parameter variable">--consistent</span> 将请求发给主节点，保证获取内容的一致性
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="update" tabindex="-1"><a class="header-anchor" href="#update"><span>update</span></a></h3><p>当键存在时，更新值内容。例如</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ etcdctl <span class="token builtin class-name">set</span> testkey hello
hello
$ etcdctl update testkey world
world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当键不存在时，则会报错。例如</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ etcdctl update testkey2 world
Error:  <span class="token number">100</span>: Key not found <span class="token punctuation">(</span>/testkey2<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>支持的选项为</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token parameter variable">--ttl</span> <span class="token string">&#39;0&#39;</span>	超时时间（单位为秒），不配置（默认为 <span class="token number">0</span>）则永不超时
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="rm" tabindex="-1"><a class="header-anchor" href="#rm"><span>rm</span></a></h3><p>删除某个键值。例如</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ etcdctl <span class="token function">rm</span> testkey
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当键不存在时，则会报错。例如</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ etcdctl <span class="token function">rm</span> testkey2
Error:  <span class="token number">100</span>: Key not found <span class="token punctuation">(</span>/testkey2<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>支持的选项为</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token parameter variable">--dir</span>		如果键是个空目录或者键值对则删除
<span class="token parameter variable">--recursive</span>		删除目录和所有子键
--with-value 	检查现有的值是否匹配
--with-index <span class="token string">&#39;0&#39;</span>	检查现有的 index 是否匹配
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mk" tabindex="-1"><a class="header-anchor" href="#mk"><span>mk</span></a></h3><p>如果给定的键不存在，则创建一个新的键值。例如</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ etcdctl mk /testdir/testkey <span class="token string">&quot;Hello world&quot;</span>
Hello world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当键存在的时候，执行该命令会报错，例如</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ etcdctl <span class="token builtin class-name">set</span> testkey <span class="token string">&quot;Hello world&quot;</span>
Hello world
$ ./etcdctl mk testkey <span class="token string">&quot;Hello world&quot;</span>
Error:  <span class="token number">105</span>: Key already exists <span class="token punctuation">(</span>/testkey<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>支持的选项为</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token parameter variable">--ttl</span> <span class="token string">&#39;0&#39;</span>	超时时间（单位为秒），不配置（默认为 <span class="token number">0</span>）则永不超时
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="mkdir" tabindex="-1"><a class="header-anchor" href="#mkdir"><span>mkdir</span></a></h3><p>如果给定的键目录不存在，则创建一个新的键目录。例如</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ etcdctl <span class="token function">mkdir</span> testdir
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当键目录存在的时候，执行该命令会报错，例如</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ etcdctl <span class="token function">mkdir</span> testdir
$ etcdctl <span class="token function">mkdir</span> testdir
Error:  <span class="token number">105</span>: Key already exists <span class="token punctuation">(</span>/testdir<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>支持的选项为</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token parameter variable">--ttl</span> <span class="token string">&#39;0&#39;</span>	超时时间（单位为秒），不配置（默认为 <span class="token number">0</span>）则永不超时
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="setdir" tabindex="-1"><a class="header-anchor" href="#setdir"><span>setdir</span></a></h3><p>创建一个键目录，无论存在与否。</p><p>支持的选项为</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token parameter variable">--ttl</span> <span class="token string">&#39;0&#39;</span>	超时时间（单位为秒），不配置（默认为 <span class="token number">0</span>）则永不超时
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="updatedir" tabindex="-1"><a class="header-anchor" href="#updatedir"><span>updatedir</span></a></h3><p>更新一个已经存在的目录。<br> 支持的选项为</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token parameter variable">--ttl</span> <span class="token string">&#39;0&#39;</span>	超时时间（单位为秒），不配置（默认为 <span class="token number">0</span>）则永不超时
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="rmdir" tabindex="-1"><a class="header-anchor" href="#rmdir"><span>rmdir</span></a></h3><p>删除一个空目录，或者键值对。</p><p>若目录不空，会报错</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ etcdctl <span class="token builtin class-name">set</span> /dir/testkey hi
hi
$ etcdctl <span class="token function">rmdir</span> /dir
Error:  <span class="token number">108</span>: Directory not empty <span class="token punctuation">(</span>/dir<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ls" tabindex="-1"><a class="header-anchor" href="#ls"><span>ls</span></a></h3><p>列出目录（默认为根目录）下的键或者子目录，默认不显示子目录中内容。</p><p>例如</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ ./etcdctl <span class="token builtin class-name">set</span> testkey <span class="token string">&#39;hi&#39;</span>
hi
$ ./etcdctl <span class="token builtin class-name">set</span> dir/test <span class="token string">&#39;hello&#39;</span>
hello
$ ./etcdctl <span class="token function">ls</span>
/testkey
/dir
$ ./etcdctl <span class="token function">ls</span> <span class="token function">dir</span>
/dir/test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>支持的选项包括</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token parameter variable">--sort</span>	将输出结果排序
<span class="token parameter variable">--recursive</span>	如果目录下有子目录，则递归输出其中的内容
<span class="token parameter variable">-p</span>		对于输出为目录，在最后添加 <span class="token variable"><span class="token variable">\`</span>/<span class="token variable">\`</span></span> 进行区分
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="非数据库操作" tabindex="-1"><a class="header-anchor" href="#非数据库操作"><span>非数据库操作</span></a></h2><h3 id="backup" tabindex="-1"><a class="header-anchor" href="#backup"><span>backup</span></a></h3><p>备份 etcd 的数据。</p><p>支持的选项包括</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>--data-dir 		etcd 的数据目录
--backup-dir 	备份到指定路径
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="watch" tabindex="-1"><a class="header-anchor" href="#watch"><span>watch</span></a></h3><p>监测一个键值的变化，一旦键值发生更新，就会输出最新的值并退出。</p><p>例如，用户更新 testkey 键值为 Hello world。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ etcdctl <span class="token function">watch</span> testkey
Hello world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>支持的选项包括</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token parameter variable">--forever</span>		一直监测，直到用户按 <span class="token variable"><span class="token variable">\`</span>CTRL+C<span class="token variable">\`</span></span> 退出
--after-index <span class="token string">&#39;0&#39;</span>	在指定 index 之前一直监测
<span class="token parameter variable">--recursive</span>		返回所有的键值和子键值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="exec-watch" tabindex="-1"><a class="header-anchor" href="#exec-watch"><span>exec-watch</span></a></h3><p>监测一个键值的变化，一旦键值发生更新，就执行给定命令。</p><p>例如，用户更新 testkey 键值。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ etcdctl exec-watch testkey -- <span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">&#39;ls&#39;</span>
default.etcd
Documentation
etcd
etcdctl
etcd-migrate
README-etcdctl.md
README.md
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>支持的选项包括</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>--after-index <span class="token string">&#39;0&#39;</span>	在指定 index 之前一直监测
<span class="token parameter variable">--recursive</span>		返回所有的键值和子键值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="member" tabindex="-1"><a class="header-anchor" href="#member"><span>member</span></a></h3><p>通过 list、add、remove 命令列出、添加、删除 etcd 实例到 etcd 集群中。</p><p>例如本地启动一个 etcd 服务实例后，可以用如下命令进行查看。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ etcdctl member list
ce2a822cea30bfca: <span class="token assign-left variable">name</span><span class="token operator">=</span>default <span class="token assign-left variable">peerURLs</span><span class="token operator">=</span>http://localhost:2380,http://localhost:7001 <span class="token assign-left variable">clientURLs</span><span class="token operator">=</span>http://localhost:2379,http://localhost:4001
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="命令选项" tabindex="-1"><a class="header-anchor" href="#命令选项"><span>命令选项</span></a></h2><ul><li><code>--debug</code> 输出 cURL 命令，显示执行命令的时候发起的请求</li><li><code>--no-sync</code> 发出请求之前不同步集群信息</li><li><code>--output, -o &#39;simple&#39;</code> 输出内容的格式 (<code>simple</code> 为原始信息，<code>json</code> 为进行json格式解码，易读性好一些)</li><li><code>--peers, -C</code> 指定集群中的同伴信息，用逗号隔开 (默认为: &quot;127.0.0.1:4001&quot;)</li><li><code>--cert-file</code> HTTPS 下客户端使用的 SSL 证书文件</li><li><code>--key-file</code> HTTPS 下客户端使用的 SSL 密钥文件</li><li><code>--ca-file</code> 服务端使用 HTTPS 时，使用 CA 文件进行验证</li><li><code>--help, -h</code> 显示帮助命令信息</li><li><code>--version, -v</code> 打印版本信息</li></ul>`,86))])}const h=t(p,[["render",u],["__file","etcdctl-v2.html.vue"]]),k=JSON.parse('{"path":"/index/Docker/etcd/etcdctl-v2.html","title":"使用 etcdctl v2","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"数据库操作","slug":"数据库操作","link":"#数据库操作","children":[{"level":3,"title":"set","slug":"set","link":"#set","children":[]},{"level":3,"title":"get","slug":"get","link":"#get","children":[]},{"level":3,"title":"update","slug":"update","link":"#update","children":[]},{"level":3,"title":"rm","slug":"rm","link":"#rm","children":[]},{"level":3,"title":"mk","slug":"mk","link":"#mk","children":[]},{"level":3,"title":"mkdir","slug":"mkdir","link":"#mkdir","children":[]},{"level":3,"title":"setdir","slug":"setdir","link":"#setdir","children":[]},{"level":3,"title":"updatedir","slug":"updatedir","link":"#updatedir","children":[]},{"level":3,"title":"rmdir","slug":"rmdir","link":"#rmdir","children":[]},{"level":3,"title":"ls","slug":"ls","link":"#ls","children":[]}]},{"level":2,"title":"非数据库操作","slug":"非数据库操作","link":"#非数据库操作","children":[{"level":3,"title":"backup","slug":"backup","link":"#backup","children":[]},{"level":3,"title":"watch","slug":"watch","link":"#watch","children":[]},{"level":3,"title":"exec-watch","slug":"exec-watch","link":"#exec-watch","children":[]},{"level":3,"title":"member","slug":"member","link":"#member","children":[]}]},{"level":2,"title":"命令选项","slug":"命令选项","link":"#命令选项","children":[]}],"git":{"createdTime":1731129855000,"updatedTime":1731129855000,"contributors":[{"name":"dkyg666","email":"43946866+dkyg666@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":5.85,"words":1756},"filePathRelative":"index/Docker/etcd/etcdctl-v2.md","localizedDate":"2024年11月9日","excerpt":"\\n<p><code>etcdctl</code> 是一个命令行客户端，它能提供一些简洁的命令，供用户直接跟 <code>etcd</code> 服务打交道，而无需基于 <code>HTTP API</code> 方式。这在某些情况下将很方便，例如用户对服务进行测试或者手动修改数据库内容。我们也推荐在刚接触 <code>etcd</code> 时通过 <code>etcdctl</code> 命令来熟悉相关的操作，这些操作跟 <code>HTTP API</code> 实际上是对应的。</p>\\n<p><code>etcd</code> 项目二进制发行包中已经包含了 <code>etcdctl</code> 工具，没有的话，可以从 <a href=\\"https://github.com/etcd-io/etcd/releases\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">github.com/etcd-io/etcd/releases</a> 下载。</p>"}');export{h as comp,k as data};
