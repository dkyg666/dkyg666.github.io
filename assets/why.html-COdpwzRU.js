import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,e as i,b as t,d as l,a as n,w as d,r as s,o as k}from"./app-7pmo0-8W.js";const f={},u={href:"https://zh.wikipedia.org/wiki/DevOps",target:"_blank",rel:"noopener noreferrer"},g={href:"https://en.wikipedia.org/wiki/Continuous_integration",target:"_blank",rel:"noopener noreferrer"},h={href:"https://en.wikipedia.org/wiki/Continuous_delivery",target:"_blank",rel:"noopener noreferrer"},x={href:"https://hub.docker.com/search/?type=image&image_filter=official",target:"_blank",rel:"noopener noreferrer"};function m(y,e){const r=s("ExternalLinkIcon"),o=s("RouteLink");return k(),p("div",null,[e[21]||(e[21]=i('<h1 id="为什么要使用-docker" tabindex="-1"><a class="header-anchor" href="#为什么要使用-docker"><span>为什么要使用 Docker？</span></a></h1><p>作为一种新兴的虚拟化方式，<code>Docker</code> 跟传统的虚拟化方式相比具有众多的优势。</p><h2 id="更高效的利用系统资源" tabindex="-1"><a class="header-anchor" href="#更高效的利用系统资源"><span>更高效的利用系统资源</span></a></h2><p>由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，<code>Docker</code> 对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。</p><h2 id="更快速的启动时间" tabindex="-1"><a class="header-anchor" href="#更快速的启动时间"><span>更快速的启动时间</span></a></h2><p>传统的虚拟机技术启动应用服务往往需要数分钟，而 <code>Docker</code> 容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。</p><h2 id="一致的运行环境" tabindex="-1"><a class="header-anchor" href="#一致的运行环境"><span>一致的运行环境</span></a></h2><p>开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 bug 并未在开发过程中被发现。而 <code>Docker</code> 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 <em>「这段代码在我机器上没问题啊」</em> 这类问题。</p><h2 id="持续交付和部署" tabindex="-1"><a class="header-anchor" href="#持续交付和部署"><span>持续交付和部署</span></a></h2>',9)),t("p",null,[e[1]||(e[1]=l("对开发和运维（")),t("a",u,[e[0]||(e[0]=l("DevOps")),n(r)]),e[2]||(e[2]=l("）人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。"))]),t("p",null,[e[6]||(e[6]=l("使用 ")),e[7]||(e[7]=t("code",null,"Docker",-1)),e[8]||(e[8]=l(" 可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过 ")),n(o,{to:"/index/Docker/image/dockerfile/"},{default:d(()=>e[3]||(e[3]=[l("Dockerfile")])),_:1}),e[9]||(e[9]=l(" 来进行镜像构建，并结合 ")),t("a",g,[e[4]||(e[4]=l("持续集成(Continuous Integration)")),n(r)]),e[10]||(e[10]=l(" 系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 ")),t("a",h,[e[5]||(e[5]=l("持续部署(Continuous Delivery/Deployment)")),n(r)]),e[11]||(e[11]=l(" 系统进行自动部署。"))]),t("p",null,[e[13]||(e[13]=l("而且使用 ")),n(o,{to:"/index/Docker/image/build.html"},{default:d(()=>e[12]||(e[12]=[t("code",null,"Dockerfile",-1)])),_:1}),e[14]||(e[14]=l(" 使镜像构建透明化，不仅仅开发团队可以理解应用运行环境，也方便运维团队理解应用运行所需条件，帮助更好的生产环境中部署该镜像。"))]),e[22]||(e[22]=t("h2",{id:"更轻松的迁移",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#更轻松的迁移"},[t("span",null,"更轻松的迁移")])],-1)),e[23]||(e[23]=t("p",null,[l("由于 "),t("code",null,"Docker"),l(" 确保了执行环境的一致性，使得应用的迁移更加容易。"),t("code",null,"Docker"),l(" 可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。")],-1)),e[24]||(e[24]=t("h2",{id:"更轻松的维护和扩展",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#更轻松的维护和扩展"},[t("span",null,"更轻松的维护和扩展")])],-1)),t("p",null,[e[16]||(e[16]=t("code",null,"Docker",-1)),e[17]||(e[17]=l(" 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，")),e[18]||(e[18]=t("code",null,"Docker",-1)),e[19]||(e[19]=l(" 团队同各个开源项目团队一起维护了一大批高质量的 ")),t("a",x,[e[15]||(e[15]=l("官方镜像")),n(r)]),e[20]||(e[20]=l("，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。"))]),e[25]||(e[25]=i('<h2 id="对比传统虚拟机总结" tabindex="-1"><a class="header-anchor" href="#对比传统虚拟机总结"><span>对比传统虚拟机总结</span></a></h2><table><thead><tr><th style="text-align:left;">特性</th><th style="text-align:left;">容器</th><th style="text-align:left;">虚拟机</th></tr></thead><tbody><tr><td style="text-align:left;">启动</td><td style="text-align:left;">秒级</td><td style="text-align:left;">分钟级</td></tr><tr><td style="text-align:left;">硬盘使用</td><td style="text-align:left;">一般为 <code>MB</code></td><td style="text-align:left;">一般为 <code>GB</code></td></tr><tr><td style="text-align:left;">性能</td><td style="text-align:left;">接近原生</td><td style="text-align:left;">弱于</td></tr><tr><td style="text-align:left;">系统支持量</td><td style="text-align:left;">单机支持上千个容器</td><td style="text-align:left;">一般几十个</td></tr></tbody></table>',2))])}const v=a(f,[["render",m],["__file","why.html.vue"]]),w=JSON.parse('{"path":"/index/Docker/introduction/why.html","title":"为什么要使用 Docker？","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"更高效的利用系统资源","slug":"更高效的利用系统资源","link":"#更高效的利用系统资源","children":[]},{"level":2,"title":"更快速的启动时间","slug":"更快速的启动时间","link":"#更快速的启动时间","children":[]},{"level":2,"title":"一致的运行环境","slug":"一致的运行环境","link":"#一致的运行环境","children":[]},{"level":2,"title":"持续交付和部署","slug":"持续交付和部署","link":"#持续交付和部署","children":[]},{"level":2,"title":"更轻松的迁移","slug":"更轻松的迁移","link":"#更轻松的迁移","children":[]},{"level":2,"title":"更轻松的维护和扩展","slug":"更轻松的维护和扩展","link":"#更轻松的维护和扩展","children":[]},{"level":2,"title":"对比传统虚拟机总结","slug":"对比传统虚拟机总结","link":"#对比传统虚拟机总结","children":[]}],"git":{"createdTime":1731129855000,"updatedTime":1731129855000,"contributors":[{"name":"dkyg666","email":"43946866+dkyg666@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":3.04,"words":911},"filePathRelative":"index/Docker/introduction/why.md","localizedDate":"2024年11月9日","excerpt":"\\n<p>作为一种新兴的虚拟化方式，<code>Docker</code> 跟传统的虚拟化方式相比具有众多的优势。</p>\\n<h2>更高效的利用系统资源</h2>\\n<p>由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，<code>Docker</code> 对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。</p>\\n<h2>更快速的启动时间</h2>\\n<p>传统的虚拟机技术启动应用服务往往需要数分钟，而 <code>Docker</code> 容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。</p>"}');export{v as comp,w as data};
