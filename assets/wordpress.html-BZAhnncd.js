import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,e as a,b as n,a as l,d as e,o as c,r}from"./app-BwK79we4.js";const i={},d={href:"https://github.com/yeasy/docker_practice/blob/master/compose/demo/wordpress/docker-compose.yml",target:"_blank",rel:"noopener noreferrer"};function u(k,s){const o=r("ExternalLinkIcon");return c(),p("div",null,[s[6]||(s[6]=a('<h1 id="使用-wordpress" tabindex="-1"><a class="header-anchor" href="#使用-wordpress"><span>使用 WordPress</span></a></h1><blockquote><p>本小节内容适合 <code>PHP</code> 开发人员阅读。</p></blockquote><p><code>Compose</code> 可以很便捷的让 <code>Wordpress</code> 运行在一个独立的环境中。</p><h2 id="创建空文件夹" tabindex="-1"><a class="header-anchor" href="#创建空文件夹"><span>创建空文件夹</span></a></h2><p>假设新建一个名为 <code>wordpress</code> 的文件夹，然后进入这个文件夹。</p><h2 id="创建-docker-compose-yml-文件" tabindex="-1"><a class="header-anchor" href="#创建-docker-compose-yml-文件"><span>创建 <code>docker-compose.yml</code> 文件</span></a></h2>',6)),n("p",null,[n("a",d,[s[0]||(s[0]=n("code",null,"docker-compose.yml",-1)),l(o)]),s[1]||(s[1]=e(" 文件将开启一个 ")),s[2]||(s[2]=n("code",null,"wordpress",-1)),s[3]||(s[3]=e(" 服务和一个独立的 ")),s[4]||(s[4]=n("code",null,"MySQL",-1)),s[5]||(s[5]=e(" 实例："))]),s[7]||(s[7]=a(`<div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3&quot;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>

   <span class="token key atrule">db</span><span class="token punctuation">:</span>
     <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">8.0</span>
     <span class="token key atrule">command</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>default_authentication_plugin=mysql_native_password
      <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>character<span class="token punctuation">-</span>set<span class="token punctuation">-</span>server=utf8mb4
      <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>collation<span class="token punctuation">-</span>server=utf8mb4_unicode_ci     
     <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
       <span class="token punctuation">-</span> db_data<span class="token punctuation">:</span>/var/lib/mysql
     <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
     <span class="token key atrule">environment</span><span class="token punctuation">:</span>
       <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> somewordpress
       <span class="token key atrule">MYSQL_DATABASE</span><span class="token punctuation">:</span> wordpress
       <span class="token key atrule">MYSQL_USER</span><span class="token punctuation">:</span> wordpress
       <span class="token key atrule">MYSQL_PASSWORD</span><span class="token punctuation">:</span> wordpress

   <span class="token key atrule">wordpress</span><span class="token punctuation">:</span>
     <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
       <span class="token punctuation">-</span> db
     <span class="token key atrule">image</span><span class="token punctuation">:</span> wordpress<span class="token punctuation">:</span>latest
     <span class="token key atrule">ports</span><span class="token punctuation">:</span>
       <span class="token punctuation">-</span> <span class="token string">&quot;8000:80&quot;</span>
     <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
     <span class="token key atrule">environment</span><span class="token punctuation">:</span>
       <span class="token key atrule">WORDPRESS_DB_HOST</span><span class="token punctuation">:</span> db<span class="token punctuation">:</span><span class="token number">3306</span>
       <span class="token key atrule">WORDPRESS_DB_USER</span><span class="token punctuation">:</span> wordpress
       <span class="token key atrule">WORDPRESS_DB_PASSWORD</span><span class="token punctuation">:</span> wordpress
<span class="token key atrule">volumes</span><span class="token punctuation">:</span>
  <span class="token key atrule">db_data</span><span class="token punctuation">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="构建并运行项目" tabindex="-1"><a class="header-anchor" href="#构建并运行项目"><span>构建并运行项目</span></a></h2><p>运行 <code>docker-compose up -d</code> Compose 就会拉取镜像再创建我们所需要的镜像，然后启动 <code>wordpress</code> 和数据库容器。 接着浏览器访问 <code>127.0.0.1:8000</code> 端口就能看到 <code>WordPress</code> 安装界面了。</p>`,3))])}const b=t(i,[["render",u],["__file","wordpress.html.vue"]]),y=JSON.parse('{"path":"/index/Docker/compose/wordpress.html","title":"使用 WordPress","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"创建空文件夹","slug":"创建空文件夹","link":"#创建空文件夹","children":[]},{"level":2,"title":"创建 docker-compose.yml 文件","slug":"创建-docker-compose-yml-文件","link":"#创建-docker-compose-yml-文件","children":[]},{"level":2,"title":"构建并运行项目","slug":"构建并运行项目","link":"#构建并运行项目","children":[]}],"git":{"createdTime":1731129855000,"updatedTime":1731129855000,"contributors":[{"name":"dkyg666","email":"43946866+dkyg666@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":0.7,"words":211},"filePathRelative":"index/Docker/compose/wordpress.md","localizedDate":"2024年11月9日","excerpt":"\\n<blockquote>\\n<p>本小节内容适合 <code>PHP</code> 开发人员阅读。</p>\\n</blockquote>\\n<p><code>Compose</code> 可以很便捷的让 <code>Wordpress</code> 运行在一个独立的环境中。</p>\\n<h2>创建空文件夹</h2>\\n<p>假设新建一个名为 <code>wordpress</code> 的文件夹，然后进入这个文件夹。</p>\\n<h2>创建 <code>docker-compose.yml</code> 文件</h2>\\n<p><a href=\\"https://github.com/yeasy/docker_practice/blob/master/compose/demo/wordpress/docker-compose.yml\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>docker-compose.yml</code></a> 文件将开启一个 <code>wordpress</code> 服务和一个独立的 <code>MySQL</code> 实例：</p>"}');export{b as comp,y as data};
