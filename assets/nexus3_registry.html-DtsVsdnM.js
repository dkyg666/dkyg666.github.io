import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,b as n,d as e,a,e as t,w as p,r as i,o as d}from"./app-dX96qGh5.js";const u={},k={href:"https://www.sonatype.com/product/repository-oss-download",target:"_blank",rel:"noopener noreferrer"};function v(m,s){const l=i("ExternalLinkIcon"),o=i("RouteLink");return d(),c("div",null,[s[21]||(s[21]=n("h1",{id:"nexus3-x-的私有仓库",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#nexus3-x-的私有仓库"},[n("span",null,"Nexus3.x 的私有仓库")])],-1)),n("p",null,[s[1]||(s[1]=e("使用 Docker 官方的 Registry 创建的仓库面临一些维护问题。比如某些镜像删除以后空间默认是不会回收的，需要一些命令去回收空间然后重启 Registry。在企业中把内部的一些工具包放入 ")),s[2]||(s[2]=n("code",null,"Nexus",-1)),s[3]||(s[3]=e(" 中是比较常见的做法，最新版本 ")),s[4]||(s[4]=n("code",null,"Nexus3.x",-1)),s[5]||(s[5]=e(" 全面支持 Docker 的私有镜像。所以使用 ")),n("a",k,[s[0]||(s[0]=n("code",null,"Nexus3.x",-1)),a(l)]),s[6]||(s[6]=e(" 一个软件来管理 ")),s[7]||(s[7]=n("code",null,"Docker",-1)),s[8]||(s[8]=e(" , ")),s[9]||(s[9]=n("code",null,"Maven",-1)),s[10]||(s[10]=e(" , ")),s[11]||(s[11]=n("code",null,"Yum",-1)),s[12]||(s[12]=e(" , ")),s[13]||(s[13]=n("code",null,"PyPI",-1)),s[14]||(s[14]=e(" 等是一个明智的选择。"))]),s[22]||(s[22]=t(`<h2 id="启动-nexus-容器" tabindex="-1"><a class="header-anchor" href="#启动-nexus-容器"><span>启动 Nexus 容器</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> nexus3 <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">\\</span>
    <span class="token parameter variable">-p</span> <span class="token number">8081</span>:8081 <span class="token punctuation">\\</span>
    <span class="token parameter variable">--mount</span> <span class="token assign-left variable">src</span><span class="token operator">=</span>nexus-data,target<span class="token operator">=</span>/nexus-data <span class="token punctuation">\\</span>
    sonatype/nexus3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首次运行需等待 3-5 分钟，你可以使用 <code>docker logs nexus3 -f</code> 查看日志：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> logs nexus3 <span class="token parameter variable">-f</span>

<span class="token number">2021</span>-03-11 <span class="token number">15</span>:31:21,990+0000 INFO  <span class="token punctuation">[</span>jetty-main-1<span class="token punctuation">]</span> *SYSTEM org.sonatype.nexus.bootstrap.jetty.JettyServer -
-------------------------------------------------

Started Sonatype Nexus OSS <span class="token number">3.30</span>.0-01

-------------------------------------------------

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你看到以上内容，说明 <code>Nexus</code> 已经启动成功，你可以使用浏览器打开 <code>http://YourIP:8081</code> 访问 <code>Nexus</code> 了。</p><p>首次运行请通过以下命令获取初始密码：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> <span class="token builtin class-name">exec</span> nexus3 <span class="token function">cat</span> /nexus-data/admin.password

9266139e-41a2-4abb-92ec-e4142a3532cb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首次启动 Nexus 的默认帐号是 <code>admin</code> ，密码则是上边命令获取到的，点击右上角登录，首次登录需更改初始密码。</p><p>登录之后可以点击页面上方的齿轮按钮按照下面的方法进行设置。</p><h2 id="创建仓库" tabindex="-1"><a class="header-anchor" href="#创建仓库"><span>创建仓库</span></a></h2><p>创建一个私有仓库的方法： <code>Repository-&gt;Repositories</code> 点击右边菜单 <code>Create repository</code> 选择 <code>docker (hosted)</code></p><ul><li><strong>Name</strong>: 仓库的名称</li><li><strong>HTTP</strong>: 仓库单独的访问端口（例如：<strong>5001</strong>）</li><li><strong>Hosted -&gt; Deployment pollcy</strong>: 请选择 <strong>Allow redeploy</strong> 否则无法上传 Docker 镜像。</li></ul><p>其它的仓库创建方法请各位自己摸索，还可以创建一个 <code>docker (proxy)</code> 类型的仓库链接到 DockerHub 上。再创建一个 <code>docker (group)</code> 类型的仓库把刚才的 <code>hosted</code> 与 <code>proxy</code> 添加在一起。主机在访问的时候默认下载私有仓库中的镜像，如果没有将链接到 DockerHub 中下载并缓存到 Nexus 中。</p><h2 id="添加访问权限" tabindex="-1"><a class="header-anchor" href="#添加访问权限"><span>添加访问权限</span></a></h2><p>菜单 <code>Security-&gt;Realms</code> 把 Docker Bearer Token Realm 移到右边的框中保存。</p><p>添加用户规则：菜单 <code>Security-&gt;Roles</code>-&gt;<code>Create role</code> 在 <code>Privlleges</code> 选项搜索 docker 把相应的规则移动到右边的框中然后保存。</p><p>添加用户：菜单 <code>Security-&gt;Users</code>-&gt;<code>Create local user</code> 在 <code>Roles</code> 选项中选中刚才创建的规则移动到右边的窗口保存。</p><h2 id="nginx-加密代理" tabindex="-1"><a class="header-anchor" href="#nginx-加密代理"><span>NGINX 加密代理</span></a></h2>`,18)),n("p",null,[s[16]||(s[16]=e("证书的生成请参见 ")),a(o,{to:"/index/Docker/repository/registry_auth.html"},{default:p(()=>s[15]||(s[15]=[n("code",null,"私有仓库高级配置",-1)])),_:1}),s[17]||(s[17]=e(" 里面证书生成一节。"))]),s[23]||(s[23]=t(`<p>NGINX 示例配置如下</p><div class="language-nginx line-numbers-mode" data-ext="nginx" data-title="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">upstream</span> register</span>
<span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">server</span> <span class="token string">&quot;YourHostName OR IP&quot;</span>:5001</span><span class="token punctuation">;</span> <span class="token comment">#端口为上面添加私有镜像仓库时设置的 HTTP 选项的端口号</span>
    <span class="token directive"><span class="token keyword">check</span> interval=3000 rise=2 fall=10 timeout=1000 type=http</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">check_http_send</span> <span class="token string">&quot;HEAD / HTTP/1.0<span class="token escape entity">\\r</span><span class="token escape entity">\\n</span><span class="token escape entity">\\r</span><span class="token escape entity">\\n</span>&quot;</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">check_http_expect_alive</span> http_4xx</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">server_name</span> YourDomainName</span><span class="token punctuation">;</span><span class="token comment">#如果没有 DNS 服务器做解析，请删除此选项使用本机 IP 地址访问</span>
    <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">443</span> ssl</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">ssl_certificate</span> key/example.crt</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">ssl_certificate_key</span> key/example.key</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">ssl_session_timeout</span>  <span class="token number">5m</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">ssl_protocols</span> TLSv1 TLSv1.1 TLSv1.2</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">ssl_ciphers</span>  HIGH:!aNULL:!MD5</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">ssl_prefer_server_ciphers</span>   <span class="token boolean">on</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">large_client_header_buffers</span> <span class="token number">4</span> <span class="token number">32k</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">client_max_body_size</span> <span class="token number">300m</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">client_body_buffer_size</span> <span class="token number">512k</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">proxy_connect_timeout</span> <span class="token number">600</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">proxy_read_timeout</span>   <span class="token number">600</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">proxy_send_timeout</span>   <span class="token number">600</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">proxy_buffer_size</span>    <span class="token number">128k</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">proxy_buffers</span>       <span class="token number">4</span> <span class="token number">64k</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">proxy_busy_buffers_size</span> <span class="token number">128k</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">proxy_temp_file_write_size</span> <span class="token number">512k</span></span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-Proto <span class="token variable">$scheme</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-Port <span class="token variable">$server_port</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_http_version</span> 1.1</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> Upgrade <span class="token variable">$http_upgrade</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> Connection <span class="token variable">$connection_upgrade</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_redirect</span> <span class="token boolean">off</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Real-IP <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_pass</span> http://register</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_read_timeout</span> <span class="token number">900s</span></span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
    <span class="token directive"><span class="token keyword">error_page</span>   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="docker-主机访问镜像仓库" tabindex="-1"><a class="header-anchor" href="#docker-主机访问镜像仓库"><span>Docker 主机访问镜像仓库</span></a></h2>`,3)),n("p",null,[s[19]||(s[19]=e("如果不启用 SSL 加密可以通过 ")),a(o,{to:"/index/Docker/repository/registry.html"},{default:p(()=>s[18]||(s[18]=[e("前面章节")])),_:1}),s[20]||(s[20]=e(" 的方法添加非 https 仓库地址到 Docker 的配置文件中然后重启 Docker。"))]),s[24]||(s[24]=t(`<p>使用 SSL 加密以后程序需要访问就不能采用修改配置的方式了。具体方法如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ openssl s_client <span class="token parameter variable">-showcerts</span> <span class="token parameter variable">-connect</span> YourDomainName OR HostIP:443 <span class="token operator">&lt;</span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>/dev/null<span class="token operator">|</span>openssl x509 <span class="token parameter variable">-outform</span> PEM <span class="token operator">&gt;</span>ca.crt
$ <span class="token function">cat</span> ca.crt <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> /etc/ssl/certs/ca-certificates.crt
$ systemctl restart <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>docker login YourDomainName OR HostIP</code> 进行测试，用户名密码填写上面 Nexus 中设置的。</p>`,3))])}const x=r(u,[["render",v],["__file","nexus3_registry.html.vue"]]),g=JSON.parse('{"path":"/index/Docker/repository/nexus3_registry.html","title":"Nexus3.x 的私有仓库","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"启动 Nexus 容器","slug":"启动-nexus-容器","link":"#启动-nexus-容器","children":[]},{"level":2,"title":"创建仓库","slug":"创建仓库","link":"#创建仓库","children":[]},{"level":2,"title":"添加访问权限","slug":"添加访问权限","link":"#添加访问权限","children":[]},{"level":2,"title":"NGINX 加密代理","slug":"nginx-加密代理","link":"#nginx-加密代理","children":[]},{"level":2,"title":"Docker 主机访问镜像仓库","slug":"docker-主机访问镜像仓库","link":"#docker-主机访问镜像仓库","children":[]}],"git":{"createdTime":1731129855000,"updatedTime":1731129855000,"contributors":[{"name":"dkyg666","email":"43946866+dkyg666@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":3.12,"words":936},"filePathRelative":"index/Docker/repository/nexus3_registry.md","localizedDate":"2024年11月9日","excerpt":"\\n<p>使用 Docker 官方的 Registry 创建的仓库面临一些维护问题。比如某些镜像删除以后空间默认是不会回收的，需要一些命令去回收空间然后重启 Registry。在企业中把内部的一些工具包放入 <code>Nexus</code> 中是比较常见的做法，最新版本 <code>Nexus3.x</code> 全面支持 Docker 的私有镜像。所以使用 <a href=\\"https://www.sonatype.com/product/repository-oss-download\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>Nexus3.x</code></a> 一个软件来管理 <code>Docker</code> , <code>Maven</code> , <code>Yum</code> , <code>PyPI</code> 等是一个明智的选择。</p>"}');export{x as comp,g as data};
