import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,b as o,d as r,a as t,o as d,r as i}from"./app-BA4_Sfsq.js";const p={},u={href:"https://docs.docker.com/engine/security/https/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://docs.docker.com/engine/security/userns-remap/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://docs.docker.com/engine/security/rootless/",target:"_blank",rel:"noopener noreferrer"};function a(f,e){const n=i("ExternalLinkIcon");return d(),s("div",null,[e[9]||(e[9]=o("h1",{id:"docker服务端的防护",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#docker服务端的防护"},[o("span",null,"Docker服务端的防护")])],-1)),e[10]||(e[10]=o("p",null,"运行一个容器或应用程序的核心是通过 Docker 服务端。Docker 服务的运行目前需要 root 权限，因此其安全性十分关键。",-1)),e[11]||(e[11]=o("p",null,[r("首先，确保只有可信的用户才可以访问 Docker 服务。Docker 允许用户在主机和容器间共享文件夹，同时不需要限制容器的访问权限，这就容易让容器突破资源限制。例如，恶意用户启动容器的时候将主机的根目录"),o("code",null,"/"),r("映射到容器的 "),o("code",null,"/host"),r(" 目录中，那么容器理论上就可以对主机的文件系统进行任意修改了。这听起来很疯狂？但是事实上几乎所有虚拟化系统都允许类似的资源共享，而没法禁止用户共享主机根文件系统到虚拟机系统。")],-1)),e[12]||(e[12]=o("p",null,"这将会造成很严重的安全后果。因此，当提供容器创建服务时（例如通过一个 web 服务器），要更加注意进行参数的安全检查，防止恶意的用户用特定参数来创建一些破坏性的容器。",-1)),e[13]||(e[13]=o("p",null,"为了加强对服务端的保护，Docker 的 REST API（客户端用来跟服务端通信）在 0.5.2 之后使用本地的 Unix 套接字机制替代了原先绑定在 127.0.0.1 上的 TCP 套接字，因为后者容易遭受跨站脚本攻击。现在用户使用 Unix 权限检查来加强套接字的访问安全。",-1)),o("p",null,[e[1]||(e[1]=r("用户仍可以利用 HTTP 提供 REST API 访问。建议使用安全机制，确保只有可信的网络或 VPN，或证书保护机制（例如受保护的 stunnel 和 ssl 认证）下的访问可以进行。此外，还可以使用 ")),o("a",u,[e[0]||(e[0]=r(" HTTPS 和证书")),t(n)]),e[2]||(e[2]=r(" 来加强保护。"))]),e[14]||(e[14]=o("p",null,"最近改进的 Linux 命名空间机制将可以实现使用非 root 用户来运行全功能的容器。这将从根本上解决了容器和主机之间共享文件系统而引起的安全问题。",-1)),e[15]||(e[15]=o("p",null,"终极目标是改进 2 个重要的安全特性：",-1)),o("ul",null,[o("li",null,[e[4]||(e[4]=r("将容器的 root 用户 ")),o("a",m,[e[3]||(e[3]=r("映射到本地主机上的非 root 用户")),t(n)]),e[5]||(e[5]=r("，减轻容器和主机之间因权限提升而引起的安全问题；"))]),o("li",null,[e[7]||(e[7]=r("允许 Docker 服务端在 ")),o("a",k,[e[6]||(e[6]=r("非 root 权限(rootless 模式)")),t(n)]),e[8]||(e[8]=r(" 下运行，利用安全可靠的子进程来代理执行需要特权权限的操作。这些子进程将只允许在限定范围内进行操作，例如仅仅负责虚拟网络设定或文件系统管理、配置操作等。"))])]),e[16]||(e[16]=o("p",null,"最后，建议采用专用的服务器来运行 Docker 和相关的管理服务（例如管理服务比如 ssh 监控和进程监控、管理工具 nrpe、collectd 等）。其它的业务服务都放到容器中去运行。",-1))])}const g=l(p,[["render",a],["__file","daemon_sec.html.vue"]]),T=JSON.parse('{"path":"/index/Docker/security/daemon_sec.html","title":"Docker服务端的防护","lang":"zh-CN","frontmatter":{},"headers":[],"git":{"createdTime":1731129855000,"updatedTime":1731129855000,"contributors":[{"name":"dkyg666","email":"43946866+dkyg666@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":2.45,"words":736},"filePathRelative":"index/Docker/security/daemon_sec.md","localizedDate":"2024年11月9日","excerpt":"\\n<p>运行一个容器或应用程序的核心是通过 Docker 服务端。Docker 服务的运行目前需要 root 权限，因此其安全性十分关键。</p>\\n<p>首先，确保只有可信的用户才可以访问 Docker 服务。Docker 允许用户在主机和容器间共享文件夹，同时不需要限制容器的访问权限，这就容易让容器突破资源限制。例如，恶意用户启动容器的时候将主机的根目录<code>/</code>映射到容器的 <code>/host</code> 目录中，那么容器理论上就可以对主机的文件系统进行任意修改了。这听起来很疯狂？但是事实上几乎所有虚拟化系统都允许类似的资源共享，而没法禁止用户共享主机根文件系统到虚拟机系统。</p>"}');export{g as comp,T as data};
