import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,e as a,b as t,d as n,a as l,o as r,r as o}from"./app-BAGG9h-A.js";const c={},p={href:"https://golang.org/pkg/path/filepath/#Match",target:"_blank",rel:"noopener noreferrer"},u={href:"https://yq.aliyun.com/articles/748427",target:"_blank",rel:"noopener noreferrer"},g={href:"https://yq.aliyun.com/articles/749590",target:"_blank",rel:"noopener noreferrer"},v={href:"https://yq.aliyun.com/articles/748427",target:"_blank",rel:"noopener noreferrer"},k={href:"https://yq.aliyun.com/articles/748427",target:"_blank",rel:"noopener noreferrer"},m={id:"_2-1-3、build-sh",tabindex:"-1"},h={class:"header-anchor",href:"#_2-1-3、build-sh"},b={href:"http://build.sh",target:"_blank",rel:"noopener noreferrer"},f={href:"https://openvz.org/Main_Page",target:"_blank",rel:"noopener noreferrer"},x={href:"https://openvz.org/Download/template/precreated",target:"_blank",rel:"noopener noreferrer"};function y(R,e){const s=o("ExternalLinkIcon");return r(),i("div",null,[e[22]||(e[22]=a(`<h1 id="dockerfile" tabindex="-1"><a class="header-anchor" href="#dockerfile"><span>Dockerfile</span></a></h1><h2 id="指令详解" tabindex="-1"><a class="header-anchor" href="#指令详解"><span>指令详解</span></a></h2><table><thead><tr><th style="text-align:left;">Dockerfile 指令</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>FROM</strong></td><td style="text-align:left;"><strong>指定基础镜像，用于后续的指令构建。</strong></td></tr><tr><td style="text-align:left;"><strong>MAINTAINER</strong></td><td style="text-align:left;"><strong>指定Dockerfile的作者/维护者。（已弃用，推荐使用LABEL指令）</strong></td></tr><tr><td style="text-align:left;"><strong>LABEL</strong></td><td style="text-align:left;"><strong>添加镜像的元数据，使用键值对的形式。</strong></td></tr><tr><td style="text-align:left;"><strong>RUN</strong></td><td style="text-align:left;"><strong>在构建过程中在镜像中执行命令。</strong></td></tr><tr><td style="text-align:left;"><strong>CMD</strong></td><td style="text-align:left;"><strong>指定容器创建时的默认命令。（可以被覆盖）</strong></td></tr><tr><td style="text-align:left;"><strong>ENTRYPOINT</strong></td><td style="text-align:left;"><strong>设置容器创建时的主要命令。（不可被覆盖）</strong></td></tr><tr><td style="text-align:left;"><strong>EXPOSE</strong></td><td style="text-align:left;"><strong>声明容器运行时监听的特定网络端口。</strong></td></tr><tr><td style="text-align:left;"><strong>ENV</strong></td><td style="text-align:left;"><strong>在容器内部设置环境变量。</strong></td></tr><tr><td style="text-align:left;"><strong>ADD</strong></td><td style="text-align:left;"><strong>将文件、目录或远程URL复制到镜像中。</strong></td></tr><tr><td style="text-align:left;"><strong>COPY</strong></td><td style="text-align:left;"><strong>将文件或目录复制到镜像中。</strong></td></tr><tr><td style="text-align:left;"><strong>VOLUME</strong></td><td style="text-align:left;"><strong>为容器创建挂载点或声明卷。</strong></td></tr><tr><td style="text-align:left;"><strong>WORKDIR</strong></td><td style="text-align:left;"><strong>设置后续指令的工作目录。</strong></td></tr><tr><td style="text-align:left;"><strong>USER</strong></td><td style="text-align:left;"><strong>指定后续指令的用户上下文。</strong></td></tr><tr><td style="text-align:left;"><strong>ARG</strong></td><td style="text-align:left;"><strong>定义在构建过程中传递给构建器的变量，可使用 &quot;docker build&quot; 命令设置。</strong></td></tr><tr><td style="text-align:left;"><strong>ONBUILD</strong></td><td style="text-align:left;"><strong>当该镜像被用作另一个构建过程的基础时，添加触发器。</strong></td></tr><tr><td style="text-align:left;"><strong>STOPSIGNAL</strong></td><td style="text-align:left;"><strong>设置发送给容器以退出的系统调用信号。</strong></td></tr><tr><td style="text-align:left;"><strong>HEALTHCHECK</strong></td><td style="text-align:left;"><strong>定义周期性检查容器健康状态的命令。</strong></td></tr><tr><td style="text-align:left;"><strong>SHELL</strong></td><td style="text-align:left;"><strong>覆盖Docker中默认的shell，用于RUN、CMD和ENTRYPOINT指令。</strong></td></tr></tbody></table><p>Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大。例如：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>FROM centos
RUN yum -y install wget
RUN wget -O redis.tar.gz &quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&quot;
RUN tar -xvf redis.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上执行会创建 3 层镜像。可简化为以下格式：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>FROM centos
RUN yum -y install wget \\
    &amp;&amp; wget -O redis.tar.gz &quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&quot; \\
    &amp;&amp; tar -xvf redis.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上，以 <strong>&amp;&amp;</strong> 符号连接命令，这样执行后，只会创建 1 层镜像。</p><h2 id="_1-基础镜像" tabindex="-1"><a class="header-anchor" href="#_1-基础镜像"><span>1. 基础镜像</span></a></h2><p>声明自定义镜像的基础镜像</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> centos</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2-描述信息" tabindex="-1"><a class="header-anchor" href="#_2-描述信息"><span>2. 描述信息</span></a></h2><p>此处可以声明镜像的负责人、版本、构建时间、描述等一系列信息，此处可以声明任何信息</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">LABEL</span> maintainer=tingtiandadi@360.cn</span>
<span class="token instruction"><span class="token keyword">LABEL</span> version=<span class="token string">&quot;1.0&quot;</span></span>
<span class="token instruction"><span class="token keyword">LABEL</span> date=<span class="token string">&quot;2020/03/08&quot;</span></span>
<span class="token instruction"><span class="token keyword">LABEL</span> description=<span class="token string">&quot;RPM软件包制作&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-安装镜像执行指令" tabindex="-1"><a class="header-anchor" href="#_3-安装镜像执行指令"><span>3. 安装镜像执行指令</span></a></h2><h3 id="_3-1-user" tabindex="-1"><a class="header-anchor" href="#_3-1-user"><span>3.1 USER</span></a></h3><p>执行Dockerfile中shell指令时指定的用户，包括：RUN、CMD、ENTRYPOINT</p><div class="language-crmsh line-numbers-mode" data-ext="crmsh" data-title="crmsh"><pre class="language-crmsh"><code>USER &lt;user&gt;[:&lt;usergroup&gt;]
USER root
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-expose" tabindex="-1"><a class="header-anchor" href="#_3-2-expose"><span>3.2 EXPOSE</span></a></h3><p>指定容器运行时的服务端口</p><p>格式为 <code>EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</code>。</p><div class="language-apache line-numbers-mode" data-ext="apache" data-title="apache"><pre class="language-apache"><code>EXPOSE 80 443
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-3-workdir" tabindex="-1"><a class="header-anchor" href="#_3-3-workdir"><span>3.3 WORKDIR</span></a></h3><p>为Dockerfile中执行的指令设置工作目录，包括：ADD、COPY、RUN、CMD、ENTRYPOINT</p><p>格式为 <code>WORKDIR &lt;工作目录路径&gt;</code></p><p>使用 <code>WORKDIR</code> 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，<code>WORKDIR</code> 会帮你建立目录。</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">WORKDIR</span> /root</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-4-add" tabindex="-1"><a class="header-anchor" href="#_3-4-add"><span>3.4 ADD</span></a></h3><p>拷贝文件/目录到镜像中</p><p><code>ADD</code> 指令和 <code>COPY</code> 的格式和性质基本一致。但是在 <code>COPY</code> 基础上增加了一些功能。比如 <code>&lt;源路径&gt;</code> 可以是一个 <code>URL</code>，这种情况下，Docker 引擎会试图去下载这个链接的文件放到 <code>&lt;目标路径&gt;</code> 去。下载后的文件权限自动设置为 <code>600</code>，如果 <code>&lt;源路径&gt;</code> 为一个 <code>tar</code> 压缩文件的话，压缩格式为 <code>gzip</code>, <code>bzip2</code> 以及 <code>xz</code> 的情况下，<code>ADD</code> 指令将会自动解压缩这个压缩文件到 <code>&lt;目标路径&gt;</code> 去。</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">ADD</span> &lt;src&gt;...&lt;dest&gt;</span>
<span class="token instruction"><span class="token keyword">ADD</span> rpmbuild.tar.gz /root/</span>
<span class="token instruction"><span class="token keyword">ADD</span> https://xxx.com/rpmbuild.tar.gz /root/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-5-copy" tabindex="-1"><a class="header-anchor" href="#_3-5-copy"><span>3.5 COPY</span></a></h3><p>拷贝文件/目录到镜像中，用法与ADD相同，但是不支持自动下载和解压</p><ul><li><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源路径&gt;... &lt;目标路径&gt;</code></li><li><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] [&quot;&lt;源路径1&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;]</code></li></ul><p>和 <code>RUN</code> 指令一样，也有两种格式，一种类似于命令行，一种类似于函数调用。<code>COPY</code> 指令将从构建上下文目录中 <code>&lt;源路径&gt;</code> 的文件/目录复制到新的一层的镜像内的 <code>&lt;目标路径&gt;</code> 位置。</p>`,35)),t("p",null,[e[1]||(e[1]=t("code",null,"<源路径>",-1)),e[2]||(e[2]=n(" 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 ")),t("a",p,[e[0]||(e[0]=t("code",null,"filepath.Match",-1)),l(s)]),e[3]||(e[3]=n(" 规则；"))]),e[23]||(e[23]=a(`<p><code>&lt;目标路径&gt;</code> 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 <code>WORKDIR</code>指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。</p><p>使用 <code>COPY</code> 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">ADD</span> /home/mysql_cron /etc/cron.d/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-6-volume" tabindex="-1"><a class="header-anchor" href="#_3-6-volume"><span>3.6 VOLUME</span></a></h3>`,4)),t("p",null,[e[5]||(e[5]=n("把主机的目录挂载到docker中，类似nfs文件共享，一般很少用，大多在**")),t("a",u,[e[4]||(e[4]=n("docker run")),l(s)]),e[6]||(e[6]=n("**中用-v来进行挂载"))]),e[24]||(e[24]=a(`<p>格式为：</p><ul><li><code>VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...]</code></li><li><code>VOLUME &lt;路径&gt;</code></li></ul><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code>VOLUME [<span class="token string">&quot;/usr/local/&quot;</span>]
VOLUME /usr/local/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-7-arg" tabindex="-1"><a class="header-anchor" href="#_3-7-arg"><span>3.7 ARG</span></a></h3><p>在构建镜像时指定的参数</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">ARG</span> user</span>
<span class="token instruction"><span class="token keyword">USER</span> <span class="token variable">$user</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,6)),t("p",null,[e[8]||(e[8]=n("只需要在**")),t("a",g,[e[7]||(e[7]=n("docker build")),l(s)]),e[9]||(e[9]=n("**时带上user参数即可"))]),e[25]||(e[25]=a(`<div class="language-n1ql line-numbers-mode" data-ext="n1ql" data-title="n1ql"><pre class="language-n1ql"><code>docker <span class="token keyword">build</span> <span class="token comment">--build-arg user=root -f dockerfile_rpmbuild .</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-8-run" tabindex="-1"><a class="header-anchor" href="#_3-8-run"><span>3.8 RUN</span></a></h3><p><code>RUN</code> 指令是用来执行命令行命令的。由于命令行的强大能力，<code>RUN</code> 指令在定制镜像时是最常用的指令之一。其格式有两种：</p><ul><li><code>shell格式</code>：<code>RUN &lt;命令&gt;</code>，就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 <code>RUN</code> 指令就是这种格式；</li><li><code>exec格式</code>：<code>RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</code>，这更像是函数调用中的格式;</li></ul><p>Dockerfile 中每一个指令都会建立一层，<code>RUN</code> 也不例外。每一个 <code>RUN</code> 的行为，都会新建立一层，在其上执行这些命令，执行结束后，<code>commit</code> 这一层的修改，构成新的镜像，所以建议多个指令使用一个<code>RUN</code>命令执行；</p><div class="language-routeros line-numbers-mode" data-ext="routeros" data-title="routeros"><pre class="language-routeros"><code>RUN [&quot;yum&quot;, &quot;install&quot;, &quot;net-tools&quot;, &quot;-y&quot;]
RUN yum install net-tools -y


FROM debian:jessie

RUN buildDeps=&#39;gcc libc6-dev make&#39; s\\
    &amp;&amp; apt-get update \\
    &amp;&amp; apt-get install -y buildDeps
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-9-env" tabindex="-1"><a class="header-anchor" href="#_3-9-env"><span>3.9 ENV</span></a></h3><p>设置当前系统内环境变量</p><p>两种格式：</p><ul><li><code>ENV &lt;key&gt; &lt;value&gt;</code></li><li><code>ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</code></li></ul><p>这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 <code>RUN</code>，还是运行时的应用，都可以直接使用这里定义的环境变量。</p><p>下列指令可以支持环境变量展开： <code>ADD</code>、<code>COPY</code>、<code>ENV</code>、<code>EXPOSE</code>、<code>LABEL</code>、<code>USER</code>、<code>WORKDIR</code>、<code>VOLUME</code>、<code>STOPSIGNAL</code>、<code>ONBUILD</code></p><div class="language-apache line-numbers-mode" data-ext="apache" data-title="apache"><pre class="language-apache"><code>ENV JAVA_HOME /usr/local/jdk1.8.0_231
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-10-healthcheck" tabindex="-1"><a class="header-anchor" href="#_3-10-healthcheck"><span>3.10 HEALTHCHECK</span></a></h3><p>检查容器是否在仍在工作</p><div class="language-awk line-numbers-mode" data-ext="awk" data-title="awk"><pre class="language-awk"><code>HEALTHCHECK <span class="token operator">--</span>interval<span class="token operator">=</span>5m <span class="token operator">--</span>timeout<span class="token operator">=</span>3s <span class="token operator">--</span>retries<span class="token operator">=</span><span class="token number">3</span> \\
    CMD curl <span class="token operator">-</span>f http<span class="token operator">:</span><span class="token regex">/localhost/</span> <span class="token operator">||</span> <span class="token keyword">exit</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>选项说明：<br> --interval=DURATION (default: 30s)：每隔多长时间探测一次，默认30秒</li></ul><p>-- timeout= DURATION (default: 30s)：服务响应超时时长，默认30秒<br> --start-period= DURATION (default: 0s)：服务启动多久后开始探测，默认0秒<br> --retries=N (default: 3)：认为检测失败几次为宕机，默认3次</p><ul><li>返回值说明：<br> 0：容器成功是健康的，随时可以使用</li></ul><p>1：不健康的容器无法正常工作<br> 2：保留不使用此退出代码</p><h2 id="_4-容器启动执行指令" tabindex="-1"><a class="header-anchor" href="#_4-容器启动执行指令"><span>4. 容器启动执行指令</span></a></h2><h3 id="_4-1-cmd方式" tabindex="-1"><a class="header-anchor" href="#_4-1-cmd方式"><span>4.1 CMD方式</span></a></h3><p>可以编辑多条，每条指令按顺序执行。</p><p>两种格式：</p><ul><li><code>shell</code> 格式：<code>CMD &lt;命令&gt;</code></li><li><code>exec</code> 格式：<code>CMD [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;...]</code></li></ul><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;-C&quot;</span>, <span class="token string">&quot;/start.sh&quot;</span>] </span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;/usr/sbin/sshd&quot;</span>, <span class="token string">&quot;-D&quot;</span>] </span>
<span class="token instruction"><span class="token keyword">CMD</span> /usr/sbin/sshd -D</span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;nginx&quot;</span>, <span class="token string">&quot;-g&quot;</span>, <span class="token string">&quot;daemon off;&quot;</span>]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-entrypoint方式" tabindex="-1"><a class="header-anchor" href="#_4-2-entrypoint方式"><span>4.2 ENTRYPOINT方式</span></a></h3>`,27)),t("p",null,[e[12]||(e[12]=n("同CMD类似，但这种方式执行的命令不会被**")),t("a",v,[e[10]||(e[10]=n("docker run")),l(s)]),e[13]||(e[13]=t("strong",null,"执行的参数所覆盖，同时",-1)),t("a",k,[e[11]||(e[11]=n("docker run")),l(s)]),e[14]||(e[14]=n("**执行的参数会传到此方式执行的脚本中。"))]),e[26]||(e[26]=a(`<div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [ <span class="token string">&quot;rpmbuild&quot;</span>, <span class="token string">&quot;-bb&quot;</span> , <span class="token string">&quot;/root/rpmbuild/SPEC/mysql-install.spec&quot;</span>]</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [ <span class="token string">&quot;dpkg&quot;</span>, <span class="token string">&quot;-b&quot;</span>, <span class="token string">&quot;mysql-install&quot;</span>, <span class="token string">&quot;mysql-install.deb&quot;</span>]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>重要提示：ENTRYPOINT可以有多行，但是执行时只有最后一行生效，切记！</strong></p><h1 id="三、dockerfile实例" tabindex="-1"><a class="header-anchor" href="#三、dockerfile实例"><span>三、Dockerfile实例</span></a></h1><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token comment"># 基础镜像</span>
<span class="token instruction"><span class="token keyword">FROM</span> centos</span>

<span class="token comment"># 描述信息</span>
<span class="token instruction"><span class="token keyword">LABEL</span> maintainer=tingtiandadi@360.cn</span>
<span class="token instruction"><span class="token keyword">LABEL</span> version=<span class="token string">&quot;1.0&quot;</span></span>
<span class="token instruction"><span class="token keyword">LABEL</span> date=<span class="token string">&quot;2020/03/08&quot;</span></span>
<span class="token instruction"><span class="token keyword">LABEL</span> description=<span class="token string">&quot;RPM软件包制作&quot;</span></span>

<span class="token comment"># 安装镜像执行指令</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /root</span>
<span class="token instruction"><span class="token keyword">USER</span> root</span>

<span class="token instruction"><span class="token keyword">RUN</span> rpm -ivh net-tools-2.0-0.51.20160912git.el8.x86_64.rpm</span>
<span class="token instruction"><span class="token keyword">RUN</span> yum install rpm-build-4.14.2-25.el8.x86_64 -y</span>

<span class="token comment"># 启动容器执行指令</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [ <span class="token string">&quot;rpmbuild&quot;</span>, <span class="token string">&quot;-bb&quot;</span>, <span class="token string">&quot;rpmbuild/SPEC/*.spec&quot;</span>]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多阶段构建" tabindex="-1"><a class="header-anchor" href="#多阶段构建"><span>多阶段构建</span></a></h3><p>构建Docker镜像的过程中，最具挑战性的事情就是如何保证Docker镜像的尺寸能够尽可能的小。但是在编译的过程中，我们可能会产生一些多余的中间件，但是很多情况下我们可能只需要最终的可运行的二进制文件，并不需要编译环境中的多余组件。</p><p>实际上，通常只有一个<code>Dockerfile</code>用于开发（包含构建应用程序所需的一切），而精简的<code>Dockerfile</code>用于生产时，它仅包含您的应用程序以及运行它所需的内容。这被称为“构建者模式”。维护两个<code>Dockerfile</code>是不理想的，并且也会十分复杂。</p><ul><li><code>Dockerfile.build</code>：用于开发构建的<code>Dockerfile</code>；</li><li><code>Dockerfile</code>：用于生产环境的<code>Dockerfile</code>；</li><li><code>build.sh</code>：构建第一个镜像并从中创建一个容器以复制出最终的二进制运行文件，然后构建第二个镜像；</li></ul><h4 id="_2-1-1、dockerfile-build" tabindex="-1"><a class="header-anchor" href="#_2-1-1、dockerfile-build"><span>2.1.1、Dockerfile.build</span></a></h4><p><strong>dockerfile</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>FROM golang:1.7.3
WORKDIR /go/src/github.com/alexellis/href-counter/
COPY app.go .
RUN go get -d -v golang.org/x/net/html \\
  &amp;&amp; CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-1-2、dockerfile" tabindex="-1"><a class="header-anchor" href="#_2-1-2、dockerfile"><span>2.1.2、Dockerfile</span></a></h4><p><strong>dockerfile</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>FROM alpine:latest  
RUN apk --no-cache add ca-certificates
WORKDIR /root/
COPY app .
CMD [&quot;./app&quot;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14)),t("h4",m,[t("a",h,[t("span",null,[e[16]||(e[16]=n("2.1.3、")),t("a",b,[e[15]||(e[15]=n("build.sh")),l(s)])])])]),e[27]||(e[27]=a(`<p><strong>dockerfile</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#!/bin/sh
echo Building alexellis2/href-counter:build

docker build --build-arg https_proxy=$https_proxy --build-arg http_proxy=$http_proxy \\  
    -t alexellis2/href-counter:build . -f Dockerfile.build

docker container create --name extract alexellis2/href-counter:build  
docker container cp extract:/go/src/github.com/alexellis/href-counter/app ./app  
docker container rm -f extract

echo Building alexellis2/href-counter:latest

docker build --no-cache -t alexellis2/href-counter:latest .
rm ./app
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2、使用多阶段构建" tabindex="-1"><a class="header-anchor" href="#_2-2、使用多阶段构建"><span>2.2、使用多阶段构建</span></a></h3><p>极大的降低了复杂度，第二<code>FROM</code>条指令以<code>alpine:latest</code>图像为基础开始新的构建阶段。该<code>COPY --from=0</code>行仅将先前阶段中构建产生的文件复制到当前的构建阶段中，Go相关的SDK和任何中间工件都没有保存在最终景象中;</p><p><strong>dockerfile</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>FROM golang:1.7.3
WORKDIR /go/src/github.com/alexellis/href-counter/
RUN go get -d -v golang.org/x/net/html  
COPY app.go .
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .

FROM alpine:latest
RUN apk --no-cache add ca-certificates
WORKDIR /root/
COPY --from=0 /go/src/github.com/alexellis/href-counter/app .
CMD [&quot;./app&quot;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、多阶段构建的使用姿势" tabindex="-1"><a class="header-anchor" href="#三、多阶段构建的使用姿势"><span>三、多阶段构建的使用姿势</span></a></h2><h3 id="_3-1、阶段的命名" tabindex="-1"><a class="header-anchor" href="#_3-1、阶段的命名"><span>3.1、阶段的命名</span></a></h3><ul><li><code>整数编号</code>：默认情况下，构建阶段未命名，但是我们可以使用整数编号来进行引用，起始编号为<code>0</code>；</li><li><code>AS &lt;NAME&gt;</code>命名：在使用<code>FROM</code>指令中同时使用<code>AS [NAME] </code>来进行阶段的命名操作；</li></ul><h3 id="_3-2、特定的构建阶段停止" tabindex="-1"><a class="header-anchor" href="#_3-2、特定的构建阶段停止"><span>3.2、特定的构建阶段停止</span></a></h3><p>示例Dockerfile：</p><p><strong>dockerfile</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>FROM golang:1.7.3 AS builder
WORKDIR /go/src/github.com/alexellis/href-counter/
RUN go get -d -v golang.org/x/net/html  
COPY app.go    .
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .

FROM alpine:latest  
RUN apk --no-cache add ca-certificates
WORKDIR /root/
COPY --from=builder /go/src/github.com/alexellis/href-counter/app .
CMD [&quot;./app&quot;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构建镜像时，不一定需要构建包括每个阶段的整个Dockerfile。您可以指定目标构建阶段，以下命令含义为<code>builder</code>的阶段构建停止：</p><p><strong>bash</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>docker build --target builder -t alexellis2/href-counter:latest .
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-3、将外部镜像作为阶段使用" tabindex="-1"><a class="header-anchor" href="#_3-3、将外部镜像作为阶段使用"><span>3.3、将外部镜像作为阶段使用</span></a></h3><p>使用多阶段构建时，您不仅限于从之前在<code>Dockerfile</code>中创建的阶段进行复制。您可以使用<code>COPY --from</code>指令从单独的映像进行复制，方法是使用本地映像名称，本地或<code>Docker</code>注册表上可用的标签或标签ID。Docker客户端在必要时提取映像并从那里复制工件。语法为：</p><p><strong>dockerfile</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>COPY --from=nginx:latest /etc/nginx/nginx.conf /nginx.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="四、多阶段构建的理解" tabindex="-1"><a class="header-anchor" href="#四、多阶段构建的理解"><span>四、多阶段构建的理解</span></a></h2><h3 id="_4-1、docker的层级概念" tabindex="-1"><a class="header-anchor" href="#_4-1、docker的层级概念"><span>4.1、docker的层级概念</span></a></h3><ul><li><code>文件层级</code>：<code>Docker</code>镜像可以理解为由多层的文件构成，当进行镜像的构建过程中，每执行一次<code>RUN</code>指令，镜像中就会增加一层；</li><li><code>起始层（根镜像）</code>：构建镜像的时候需要使用<code>FROM</code>指令选择一个基础镜像，即根镜像，后续所有的操作都会基于这个根镜像进行，<code>Docker</code>镜像只允许有一个根镜像，在多阶段构建中虽然使用了多个<code>FROM</code>指令，但是只有最后一个才是最终构建的根镜像；</li><li><code>层共享</code>：当我们的操作系统中只存在一个镜像，且该镜像的层数为<code>5</code>，当我们基于这个镜像构建新的镜像（新镜像比之前的镜像多出<code>2层</code>）进行构建的时候，最终在系统一共保存了<code>7层</code>，而不是<code>5+7=12层</code>，这就是<code>Docker</code>镜像的层共享；</li><li><code>联合挂载</code>：由于<code>Docker</code>的每一层只记录文件变更，因此在新启动一个容器的时候会计算当时使用镜像的每一层的信息，最终生成一个文件系统，这就是联合挂载的含义；</li></ul><h3 id="_4-2、多个from的理解" tabindex="-1"><a class="header-anchor" href="#_4-2、多个from的理解"><span>4.2、多个FROM的理解</span></a></h3><ul><li><code>中间产物</code>：在执行多个<code>FROM</code>之后，系统内会存在多个没有名称和<code>TAG</code>的无名镜像，这些镜像就是在多阶段构建中产生的中间镜像；</li><li><code>最终依赖</code>：多阶段构建中的多个<code>FROM</code>中只有最后一个<code>FROM</code>的镜像才是最终镜像的根镜像，在构建才是最终构建的根镜像；</li></ul><h3 id="从-rootfs-压缩包导入构建" tabindex="-1"><a class="header-anchor" href="#从-rootfs-压缩包导入构建"><span>从 rootfs 压缩包导入构建</span></a></h3><p>除了标准的使用 <code>Dockerfile</code> 生成镜像的方法外，由于各种特殊需求和历史原因，还提供了一些其它方法用以生成镜像。</p><p>格式：<code>docker import [选项] &lt;文件&gt;|&lt;URL&gt;|- [&lt;仓库名&gt;[:&lt;标签&gt;]]</code></p><p>压缩包可以是本地文件、远程 Web 文件，甚至是从标准输入中得到。压缩包将会在镜像 <code>/</code> 目录展开，并直接作为镜像第一层提交。</p>`,29)),t("p",null,[e[19]||(e[19]=n("比如我们想要创建一个 ")),t("a",f,[e[17]||(e[17]=n("OpenVZ")),l(s)]),e[20]||(e[20]=n(" 的 Ubuntu 14.04 ")),t("a",x,[e[18]||(e[18]=n("模板")),l(s)]),e[21]||(e[21]=n("的镜像："))]),e[28]||(e[28]=a(`<p><strong>bash</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>docker import \\
    http://download.openvz.org/template/precreated/ubuntu-14.04-x86_64-minimal.tar.gz \\
    openvz/ubuntu:14.04
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这条命令自动下载了 <code>ubuntu-14.04-x86_64-minimal.tar.gz</code> 文件，并且作为根文件系统展开导入，并保存为镜像 <code>openvz/ubuntu:14.04</code>。</p>`,3))])}const q=d(c,[["render",y],["__file","Dockerfile.html.vue"]]),_=JSON.parse('{"path":"/other/%E8%BD%AF%E8%B7%AF%E7%94%B1/OpenWrt/Dockerfile.html","title":"Dockerfile","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"指令详解","slug":"指令详解","link":"#指令详解","children":[]},{"level":2,"title":"1. 基础镜像","slug":"_1-基础镜像","link":"#_1-基础镜像","children":[]},{"level":2,"title":"2. 描述信息","slug":"_2-描述信息","link":"#_2-描述信息","children":[]},{"level":2,"title":"3. 安装镜像执行指令","slug":"_3-安装镜像执行指令","link":"#_3-安装镜像执行指令","children":[{"level":3,"title":"3.1 USER","slug":"_3-1-user","link":"#_3-1-user","children":[]},{"level":3,"title":"3.2 EXPOSE","slug":"_3-2-expose","link":"#_3-2-expose","children":[]},{"level":3,"title":"3.3 WORKDIR","slug":"_3-3-workdir","link":"#_3-3-workdir","children":[]},{"level":3,"title":"3.4 ADD","slug":"_3-4-add","link":"#_3-4-add","children":[]},{"level":3,"title":"3.5 COPY","slug":"_3-5-copy","link":"#_3-5-copy","children":[]},{"level":3,"title":"3.6 VOLUME","slug":"_3-6-volume","link":"#_3-6-volume","children":[]},{"level":3,"title":"3.7 ARG","slug":"_3-7-arg","link":"#_3-7-arg","children":[]},{"level":3,"title":"3.8 RUN","slug":"_3-8-run","link":"#_3-8-run","children":[]},{"level":3,"title":"3.9 ENV","slug":"_3-9-env","link":"#_3-9-env","children":[]},{"level":3,"title":"3.10 HEALTHCHECK","slug":"_3-10-healthcheck","link":"#_3-10-healthcheck","children":[]}]},{"level":2,"title":"4. 容器启动执行指令","slug":"_4-容器启动执行指令","link":"#_4-容器启动执行指令","children":[{"level":3,"title":"4.1 CMD方式","slug":"_4-1-cmd方式","link":"#_4-1-cmd方式","children":[]},{"level":3,"title":"4.2 ENTRYPOINT方式","slug":"_4-2-entrypoint方式","link":"#_4-2-entrypoint方式","children":[]},{"level":3,"title":"多阶段构建","slug":"多阶段构建","link":"#多阶段构建","children":[{"level":4,"title":"2.1.1、Dockerfile.build","slug":"_2-1-1、dockerfile-build","link":"#_2-1-1、dockerfile-build","children":[]},{"level":4,"title":"2.1.2、Dockerfile","slug":"_2-1-2、dockerfile","link":"#_2-1-2、dockerfile","children":[]},{"level":4,"title":"2.1.3、build.sh","slug":"_2-1-3、build-sh","link":"#_2-1-3、build-sh","children":[]}]},{"level":3,"title":"2.2、使用多阶段构建","slug":"_2-2、使用多阶段构建","link":"#_2-2、使用多阶段构建","children":[]}]},{"level":2,"title":"三、多阶段构建的使用姿势","slug":"三、多阶段构建的使用姿势","link":"#三、多阶段构建的使用姿势","children":[{"level":3,"title":"3.1、阶段的命名","slug":"_3-1、阶段的命名","link":"#_3-1、阶段的命名","children":[]},{"level":3,"title":"3.2、特定的构建阶段停止","slug":"_3-2、特定的构建阶段停止","link":"#_3-2、特定的构建阶段停止","children":[]},{"level":3,"title":"3.3、将外部镜像作为阶段使用","slug":"_3-3、将外部镜像作为阶段使用","link":"#_3-3、将外部镜像作为阶段使用","children":[]}]},{"level":2,"title":"四、多阶段构建的理解","slug":"四、多阶段构建的理解","link":"#四、多阶段构建的理解","children":[{"level":3,"title":"4.1、docker的层级概念","slug":"_4-1、docker的层级概念","link":"#_4-1、docker的层级概念","children":[]},{"level":3,"title":"4.2、多个FROM的理解","slug":"_4-2、多个from的理解","link":"#_4-2、多个from的理解","children":[]},{"level":3,"title":"从 rootfs 压缩包导入构建","slug":"从-rootfs-压缩包导入构建","link":"#从-rootfs-压缩包导入构建","children":[]}]}],"git":{"createdTime":1731900879000,"updatedTime":1731900879000,"contributors":[{"name":"dkyg666","email":"43946866+dkyg666@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":11.14,"words":3343},"filePathRelative":"other/软路由/OpenWrt/Dockerfile.md","localizedDate":"2024年11月18日","excerpt":"\\n<h2>指令详解</h2>\\n<table>\\n<thead>\\n<tr>\\n<th style=\\"text-align:left\\">Dockerfile 指令</th>\\n<th style=\\"text-align:left\\">说明</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td style=\\"text-align:left\\"><strong>FROM</strong></td>\\n<td style=\\"text-align:left\\"><strong>指定基础镜像，用于后续的指令构建。</strong></td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><strong>MAINTAINER</strong></td>\\n<td style=\\"text-align:left\\"><strong>指定Dockerfile的作者/维护者。（已弃用，推荐使用LABEL指令）</strong></td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><strong>LABEL</strong></td>\\n<td style=\\"text-align:left\\"><strong>添加镜像的元数据，使用键值对的形式。</strong></td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><strong>RUN</strong></td>\\n<td style=\\"text-align:left\\"><strong>在构建过程中在镜像中执行命令。</strong></td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><strong>CMD</strong></td>\\n<td style=\\"text-align:left\\"><strong>指定容器创建时的默认命令。（可以被覆盖）</strong></td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><strong>ENTRYPOINT</strong></td>\\n<td style=\\"text-align:left\\"><strong>设置容器创建时的主要命令。（不可被覆盖）</strong></td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><strong>EXPOSE</strong></td>\\n<td style=\\"text-align:left\\"><strong>声明容器运行时监听的特定网络端口。</strong></td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><strong>ENV</strong></td>\\n<td style=\\"text-align:left\\"><strong>在容器内部设置环境变量。</strong></td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><strong>ADD</strong></td>\\n<td style=\\"text-align:left\\"><strong>将文件、目录或远程URL复制到镜像中。</strong></td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><strong>COPY</strong></td>\\n<td style=\\"text-align:left\\"><strong>将文件或目录复制到镜像中。</strong></td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><strong>VOLUME</strong></td>\\n<td style=\\"text-align:left\\"><strong>为容器创建挂载点或声明卷。</strong></td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><strong>WORKDIR</strong></td>\\n<td style=\\"text-align:left\\"><strong>设置后续指令的工作目录。</strong></td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><strong>USER</strong></td>\\n<td style=\\"text-align:left\\"><strong>指定后续指令的用户上下文。</strong></td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><strong>ARG</strong></td>\\n<td style=\\"text-align:left\\"><strong>定义在构建过程中传递给构建器的变量，可使用 \\"docker build\\" 命令设置。</strong></td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><strong>ONBUILD</strong></td>\\n<td style=\\"text-align:left\\"><strong>当该镜像被用作另一个构建过程的基础时，添加触发器。</strong></td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><strong>STOPSIGNAL</strong></td>\\n<td style=\\"text-align:left\\"><strong>设置发送给容器以退出的系统调用信号。</strong></td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><strong>HEALTHCHECK</strong></td>\\n<td style=\\"text-align:left\\"><strong>定义周期性检查容器健康状态的命令。</strong></td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><strong>SHELL</strong></td>\\n<td style=\\"text-align:left\\"><strong>覆盖Docker中默认的shell，用于RUN、CMD和ENTRYPOINT指令。</strong></td>\\n</tr>\\n</tbody>\\n</table>"}');export{q as comp,_ as data};
