import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,e as a,o as c}from"./app-BA4_Sfsq.js";const i={};function o(d,e){return c(),s("div",null,e[0]||(e[0]=[a(`<h1 id="在-swarm-集群中管理配置数据" tabindex="-1"><a class="header-anchor" href="#在-swarm-集群中管理配置数据"><span>在 Swarm 集群中管理配置数据</span></a></h1><p>在动态的、大规模的分布式集群上，管理和分发配置文件也是很重要的工作。传统的配置文件分发方式（如配置文件放入镜像中，设置环境变量，volume 动态挂载等）都降低了镜像的通用性。</p><p>在 Docker 17.06 以上版本中，Docker 新增了 <code>docker config</code> 子命令来管理集群中的配置信息，以后你无需将配置文件放入镜像或挂载到容器中就可实现对服务的配置。</p><blockquote><p>注意：<code>config</code> 仅能在 Swarm 集群中使用。</p></blockquote><p>这里我们以在 Swarm 集群中部署 <code>redis</code> 服务为例。</p><h2 id="创建-config" tabindex="-1"><a class="header-anchor" href="#创建-config"><span>创建 config</span></a></h2><p>新建 <code>redis.conf</code> 文件</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>port <span class="token number">6380</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此项配置 Redis 监听 <code>6380</code> 端口</p><p>我们使用 <code>docker config create</code> 命令创建 <code>config</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> config create redis.conf redis.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="查看-config" tabindex="-1"><a class="header-anchor" href="#查看-config"><span>查看 config</span></a></h2><p>使用 <code>docker config ls</code> 命令来查看 <code>config</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> config <span class="token function">ls</span>

ID                          NAME                CREATED             UPDATED
yod8fx8iiqtoo84jgwadp86yk   redis.conf          <span class="token number">4</span> seconds ago       <span class="token number">4</span> seconds ago
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建-redis-服务" tabindex="-1"><a class="header-anchor" href="#创建-redis-服务"><span>创建 redis 服务</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> <span class="token function">service</span> create <span class="token punctuation">\\</span>
     <span class="token parameter variable">--name</span> redis <span class="token punctuation">\\</span>
     <span class="token comment"># --config source=redis.conf,target=/etc/redis.conf \\</span>
     <span class="token parameter variable">--config</span> redis.conf <span class="token punctuation">\\</span>
     <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6380 <span class="token punctuation">\\</span>
     redis:latest <span class="token punctuation">\\</span>
     redis-server /redis.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你没有在 <code>target</code> 中显式的指定路径时，默认的 <code>redis.conf</code> 以 <code>tmpfs</code> 文件系统挂载到容器的 <code>/config.conf</code>。</p><p>经过测试，redis 可以正常使用。</p><p>以前我们通过监听主机目录来配置 Redis，就需要在集群的每个节点放置该文件，如果采用 <code>docker config</code> 来管理服务的配置信息，我们只需在集群中的管理节点创建 <code>config</code>，当部署服务时，集群会自动的将配置文件分发到运行服务的各个节点中，大大降低了配置信息的管理和分发难度。</p>`,19)]))}const t=n(i,[["render",o],["__file","config.html.vue"]]),p=JSON.parse('{"path":"/index/Docker/swarm_mode/config.html","title":"在 Swarm 集群中管理配置数据","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"创建 config","slug":"创建-config","link":"#创建-config","children":[]},{"level":2,"title":"查看 config","slug":"查看-config","link":"#查看-config","children":[]},{"level":2,"title":"创建 redis 服务","slug":"创建-redis-服务","link":"#创建-redis-服务","children":[]}],"git":{"createdTime":1731129855000,"updatedTime":1731129855000,"contributors":[{"name":"dkyg666","email":"43946866+dkyg666@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":1.41,"words":423},"filePathRelative":"index/Docker/swarm_mode/config.md","localizedDate":"2024年11月9日","excerpt":"\\n<p>在动态的、大规模的分布式集群上，管理和分发配置文件也是很重要的工作。传统的配置文件分发方式（如配置文件放入镜像中，设置环境变量，volume 动态挂载等）都降低了镜像的通用性。</p>\\n<p>在 Docker 17.06 以上版本中，Docker 新增了 <code>docker config</code> 子命令来管理集群中的配置信息，以后你无需将配置文件放入镜像或挂载到容器中就可实现对服务的配置。</p>\\n<blockquote>\\n<p>注意：<code>config</code> 仅能在 Swarm 集群中使用。</p>\\n</blockquote>\\n<p>这里我们以在 Swarm 集群中部署 <code>redis</code> 服务为例。</p>"}');export{t as comp,p as data};
