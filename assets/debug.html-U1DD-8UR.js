import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,e as n,o as d}from"./app-7pmo0-8W.js";const o={};function l(t,a){return d(),s("div",null,a[0]||(a[0]=[n(`<h1 id="如何调试-docker" tabindex="-1"><a class="header-anchor" href="#如何调试-docker"><span>如何调试 Docker</span></a></h1><h2 id="开启-debug-模式" tabindex="-1"><a class="header-anchor" href="#开启-debug-模式"><span>开启 Debug 模式</span></a></h2><p>在 dockerd 配置文件 daemon.json（默认位于 /etc/docker/）中添加</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;debug&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启守护进程。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> <span class="token function">kill</span> <span class="token parameter variable">-SIGHUP</span> <span class="token variable"><span class="token variable">$(</span>pidof dockerd<span class="token variable">)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时 dockerd 会在日志中输入更多信息供分析。</p><h2 id="检查内核日志" tabindex="-1"><a class="header-anchor" href="#检查内核日志"><span>检查内核日志</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> <span class="token function">dmesg</span> <span class="token operator">|</span><span class="token function">grep</span> dockerd
$ <span class="token function">sudo</span> <span class="token function">dmesg</span> <span class="token operator">|</span><span class="token function">grep</span> runc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="docker-不响应时处理" tabindex="-1"><a class="header-anchor" href="#docker-不响应时处理"><span>Docker 不响应时处理</span></a></h2><p>可以杀死 dockerd 进程查看其堆栈调用情况。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> <span class="token function">kill</span> <span class="token parameter variable">-SIGUSR1</span> <span class="token variable"><span class="token variable">$(</span>pidof dockerd<span class="token variable">)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="重置-docker-本地数据" tabindex="-1"><a class="header-anchor" href="#重置-docker-本地数据"><span>重置 Docker 本地数据</span></a></h2><p><em>注意，本操作会移除所有的 Docker 本地数据，包括镜像和容器等。</em></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/lib/docker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,15)]))}const r=e(o,[["render",l],["__file","debug.html.vue"]]),p=JSON.parse('{"path":"/index/Docker/appendix/debug.html","title":"如何调试 Docker","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"开启 Debug 模式","slug":"开启-debug-模式","link":"#开启-debug-模式","children":[]},{"level":2,"title":"检查内核日志","slug":"检查内核日志","link":"#检查内核日志","children":[]},{"level":2,"title":"Docker 不响应时处理","slug":"docker-不响应时处理","link":"#docker-不响应时处理","children":[]},{"level":2,"title":"重置 Docker 本地数据","slug":"重置-docker-本地数据","link":"#重置-docker-本地数据","children":[]}],"git":{"createdTime":1731129855000,"updatedTime":1731129855000,"contributors":[{"name":"dkyg666","email":"43946866+dkyg666@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":0.46,"words":137},"filePathRelative":"index/Docker/appendix/debug.md","localizedDate":"2024年11月9日","excerpt":"\\n<h2>开启 Debug 模式</h2>\\n<p>在 dockerd 配置文件 daemon.json（默认位于 /etc/docker/）中添加</p>\\n<div class=\\"language-json\\" data-ext=\\"json\\" data-title=\\"json\\"><pre class=\\"language-json\\"><code><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token property\\">\\"debug\\"</span><span class=\\"token operator\\">:</span> <span class=\\"token boolean\\">true</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>"}');export{r as comp,p as data};
