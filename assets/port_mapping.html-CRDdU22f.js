import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,e as s,o as p}from"./app-dX96qGh5.js";const t={};function o(l,a){return p(),e("div",null,a[0]||(a[0]=[s(`<h1 id="外部访问容器" tabindex="-1"><a class="header-anchor" href="#外部访问容器"><span>外部访问容器</span></a></h1><p>容器中可以运行一些网络应用，要让外部也可以访问这些应用，可以通过 <code>-P</code> 或 <code>-p</code> 参数来指定端口映射。</p><p>当使用 <code>-P</code> 标记时，Docker 会随机映射一个端口到内部容器开放的网络端口。</p><p>使用 <code>docker container ls</code> 可以看到，本地主机的 32768 被映射到了容器的 80 端口。此时访问本机的 32768 端口即可访问容器内 NGINX 默认页面。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-P</span> nginx:alpine

$ <span class="token function">docker</span> container <span class="token function">ls</span> <span class="token parameter variable">-l</span>
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                   NAMES
fae320d08268        nginx:alpine        <span class="token string">&quot;/docker-entrypoint.…&quot;</span>   <span class="token number">24</span> seconds ago      Up <span class="token number">20</span> seconds       <span class="token number">0.0</span>.0.0:32768-<span class="token operator">&gt;</span><span class="token number">80</span>/tcp   bold_mcnulty
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样的，可以通过 <code>docker logs</code> 命令来查看访问记录。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> logs fa
<span class="token number">172.17</span>.0.1 - - <span class="token punctuation">[</span><span class="token number">25</span>/Aug/2020:08:34:04 +0000<span class="token punctuation">]</span> <span class="token string">&quot;GET / HTTP/1.1&quot;</span> <span class="token number">200</span> <span class="token number">612</span> <span class="token string">&quot;-&quot;</span> <span class="token string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:80.0) Gecko/20100101 Firefox/80.0&quot;</span> <span class="token string">&quot;-&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>-p</code> 则可以指定要映射的端口，并且，在一个指定端口上只可以绑定一个容器。支持的格式有 <code>ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort</code>。</p><h2 id="映射所有接口地址" tabindex="-1"><a class="header-anchor" href="#映射所有接口地址"><span>映射所有接口地址</span></a></h2><p>使用 <code>hostPort:containerPort</code> 格式本地的 80 端口映射到容器的 80 端口，可以执行</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 nginx:alpine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时默认会绑定本地所有接口上的所有地址。</p><h2 id="映射到指定地址的指定端口" tabindex="-1"><a class="header-anchor" href="#映射到指定地址的指定端口"><span>映射到指定地址的指定端口</span></a></h2><p>可以使用 <code>ip:hostPort:containerPort</code> 格式指定映射使用一个特定地址，比如 localhost 地址 127.0.0.1</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">127.0</span>.0.1:80:80 nginx:alpine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="映射到指定地址的任意端口" tabindex="-1"><a class="header-anchor" href="#映射到指定地址的任意端口"><span>映射到指定地址的任意端口</span></a></h2><p>使用 <code>ip::containerPort</code> 绑定 localhost 的任意端口到容器的 80 端口，本地主机会自动分配一个端口。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">127.0</span>.0.1::80 nginx:alpine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>还可以使用 <code>udp</code> 标记来指定 <code>udp</code> 端口</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">127.0</span>.0.1:80:80/udp nginx:alpine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="查看映射端口配置" tabindex="-1"><a class="header-anchor" href="#查看映射端口配置"><span>查看映射端口配置</span></a></h2><p>使用 <code>docker port</code> 来查看当前映射的端口配置，也可以查看到绑定的地址</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> port fa <span class="token number">80</span>
<span class="token number">0.0</span>.0.0:32768
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><ul><li><p>容器有自己的内部网络和 ip 地址（使用 <code>docker inspect</code> 查看，Docker 还可以有一个可变的网络配置。）</p></li><li><p><code>-p</code> 标记可以多次使用来绑定多个端口</p></li></ul><p>例如</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token punctuation">\\</span>
    <span class="token parameter variable">-p</span> <span class="token number">443</span>:443 <span class="token punctuation">\\</span>
    nginx:alpine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27)]))}const r=n(t,[["render",o],["__file","port_mapping.html.vue"]]),d=JSON.parse('{"path":"/index/Docker/network/port_mapping.html","title":"外部访问容器","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"映射所有接口地址","slug":"映射所有接口地址","link":"#映射所有接口地址","children":[]},{"level":2,"title":"映射到指定地址的指定端口","slug":"映射到指定地址的指定端口","link":"#映射到指定地址的指定端口","children":[]},{"level":2,"title":"映射到指定地址的任意端口","slug":"映射到指定地址的任意端口","link":"#映射到指定地址的任意端口","children":[]},{"level":2,"title":"查看映射端口配置","slug":"查看映射端口配置","link":"#查看映射端口配置","children":[]}],"git":{"createdTime":1731129855000,"updatedTime":1731129855000,"contributors":[{"name":"dkyg666","email":"43946866+dkyg666@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":1.8,"words":541},"filePathRelative":"index/Docker/network/port_mapping.md","localizedDate":"2024年11月9日","excerpt":"\\n<p>容器中可以运行一些网络应用，要让外部也可以访问这些应用，可以通过 <code>-P</code> 或 <code>-p</code> 参数来指定端口映射。</p>\\n<p>当使用 <code>-P</code> 标记时，Docker 会随机映射一个端口到内部容器开放的网络端口。</p>\\n<p>使用 <code>docker container ls</code> 可以看到，本地主机的 32768 被映射到了容器的 80 端口。此时访问本机的 32768 端口即可访问容器内 NGINX 默认页面。</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code>$ <span class=\\"token function\\">docker</span> run <span class=\\"token parameter variable\\">-d</span> <span class=\\"token parameter variable\\">-P</span> nginx:alpine\\n\\n$ <span class=\\"token function\\">docker</span> container <span class=\\"token function\\">ls</span> <span class=\\"token parameter variable\\">-l</span>\\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                   NAMES\\nfae320d08268        nginx:alpine        <span class=\\"token string\\">\\"/docker-entrypoint.…\\"</span>   <span class=\\"token number\\">24</span> seconds ago      Up <span class=\\"token number\\">20</span> seconds       <span class=\\"token number\\">0.0</span>.0.0:32768-<span class=\\"token operator\\">&gt;</span><span class=\\"token number\\">80</span>/tcp   bold_mcnulty\\n</code></pre></div>"}');export{r as comp,d as data};
