import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,b as o,d as n,a as t,w as l,r as i,o as m}from"./app-BAGG9h-A.js";const p={},u={href:"https://en.wikipedia.org/wiki/Linux_namespaces",target:"_blank",rel:"noopener noreferrer"};function k(f,e){const d=i("ExternalLinkIcon"),r=i("RouteLink");return m(),s("div",null,[e[10]||(e[10]=o("h1",{id:"docker-容器",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#docker-容器"},[o("span",null,"Docker 容器")])],-1)),e[11]||(e[11]=o("p",null,[n("镜像（"),o("code",null,"Image"),n("）和容器（"),o("code",null,"Container"),n("）的关系，就像是面向对象程序设计中的 "),o("code",null,"类"),n(" 和 "),o("code",null,"实例"),n(" 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。")],-1)),o("p",null,[e[1]||(e[1]=n("容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 ")),o("a",u,[e[0]||(e[0]=n("命名空间")),t(d)]),e[2]||(e[2]=n("。因此容器可以拥有自己的 ")),e[3]||(e[3]=o("code",null,"root",-1)),e[4]||(e[4]=n(" 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。也因为这种隔离的特性，很多人初学 Docker 时常常会混淆容器和虚拟机。"))]),e[12]||(e[12]=o("p",null,[n("前面讲过镜像使用的是分层存储，容器也是如此。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为 "),o("strong",null,"容器存储层"),n("。")],-1)),e[13]||(e[13]=o("p",null,"容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。",-1)),o("p",null,[e[7]||(e[7]=n("按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 ")),t(r,{to:"/index/Docker/data_management/volume.html"},{default:l(()=>e[5]||(e[5]=[n("数据卷（Volume）")])),_:1}),e[8]||(e[8]=n("、或者 ")),t(r,{to:"/index/Docker/data_management/bind-mounts.html"},{default:l(()=>e[6]||(e[6]=[n("绑定宿主目录")])),_:1}),e[9]||(e[9]=n("，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。"))]),e[14]||(e[14]=o("p",null,"数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。",-1))])}const D=a(p,[["render",k],["__file","container.html.vue"]]),c=JSON.parse('{"path":"/index/Docker/basic_concept/container.html","title":"Docker 容器","lang":"zh-CN","frontmatter":{},"headers":[],"git":{"createdTime":1731129855000,"updatedTime":1731129855000,"contributors":[{"name":"dkyg666","email":"43946866+dkyg666@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":1.79,"words":537},"filePathRelative":"index/Docker/basic_concept/container.md","localizedDate":"2024年11月9日","excerpt":"\\n<p>镜像（<code>Image</code>）和容器（<code>Container</code>）的关系，就像是面向对象程序设计中的 <code>类</code> 和 <code>实例</code> 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p>\\n<p>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 <a href=\\"https://en.wikipedia.org/wiki/Linux_namespaces\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">命名空间</a>。因此容器可以拥有自己的 <code>root</code> 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。也因为这种隔离的特性，很多人初学 Docker 时常常会混淆容器和虚拟机。</p>"}');export{D as comp,c as data};
