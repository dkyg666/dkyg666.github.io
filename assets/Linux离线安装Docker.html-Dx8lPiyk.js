import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as s,d as n,a as t,e as i,o as r,r as c}from"./app-DYmmM49d.js";const d={},p={href:"https://www.docker.com/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://docs.docker.com/engine/install/centos/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://docs.docker.com/engine/install/binaries/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://download.docker.com/linux/static/stable/x86_64/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/docker/compose/releases/tag/v2.18.1",target:"_blank",rel:"noopener noreferrer"};function b(g,e){const a=c("ExternalLinkIcon");return r(),l("div",null,[e[9]||(e[9]=s("h1",{id:"linux离线安装docker",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#linux离线安装docker"},[s("span",null,"Linux离线安装Docker")])],-1)),e[10]||(e[10]=s("h4",{id:"下载docker",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#下载docker"},[s("span",null,"下载Docker")])],-1)),s("p",null,[e[1]||(e[1]=n("Docker官网：")),s("a",p,[e[0]||(e[0]=n("Docker: Accelerated Container Application Development")),t(a)])]),s("p",null,[e[3]||(e[3]=n("Docker引擎安装说明：")),s("a",u,[e[2]||(e[2]=n("在 CentOS 上安装 Docker 引擎 |Docker 文档")),t(a)])]),s("p",null,[e[5]||(e[5]=n("Docker二进制安装说明：")),s("a",m,[e[4]||(e[4]=n("从二进制文件安装 Docker 引擎 |Docker 文档")),t(a)])]),s("p",null,[e[7]||(e[7]=n("因为这里要使用离线安装Docker，所以为二进制安装。需要下载二进制文件。下载地址：")),s("a",v,[e[6]||(e[6]=n("https://download.docker.com/linux/static/stable/x86_64/")),t(a)])]),e[11]||(e[11]=i(`<p>选择版本进行下载，下载成功后解压docker包。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> docker-26.1.3.tgz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="安装docker" tabindex="-1"><a class="header-anchor" href="#安装docker"><span>安装Docker</span></a></h4><p>将解压出来的<code>docker</code>文件内容拷贝或者移动到 <code>/usr/bin/</code>目录下</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">cp</span> <span class="token parameter variable">-rf</span> docker/* /usr/bin/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后就可以使用 <code>docker -v</code> 或者 <code>docker info</code> 命令验证是否可以输出<code>docker</code>信息了。因为没有开启守护进程，docker 其他命令还不能使用。所以需要编写<code>docker.service</code> 文件加入Linux服务当中并开启守护进程。</p><p>编辑文件:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">vim</span> /etc/systemd/system/docker.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>添加内容：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>
<span class="token assign-left variable">Description</span><span class="token operator">=</span>Docker Application Container Engine
<span class="token assign-left variable">Documentation</span><span class="token operator">=</span>https://docs.docker.com
<span class="token assign-left variable">After</span><span class="token operator">=</span>network-online.target firewalld.service
<span class="token assign-left variable">Wants</span><span class="token operator">=</span>network-online.target
  
<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>
<span class="token assign-left variable">Type</span><span class="token operator">=</span>notify
<span class="token comment"># the default is not to use systemd for cgroups because the delegate issues still</span>
<span class="token comment"># exists and systemd currently does not support the cgroup feature set required</span>
<span class="token comment"># for containers run by docker</span>
<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/dockerd <span class="token parameter variable">-H</span> unix:///var/run/docker.sock --selinux-enabled<span class="token operator">=</span>false --default-ulimit <span class="token assign-left variable">nofile</span><span class="token operator">=</span><span class="token number">65536</span>:65536
<span class="token assign-left variable">ExecReload</span><span class="token operator">=</span>/bin/kill <span class="token parameter variable">-s</span> HUP <span class="token variable">$MAINPID</span>
<span class="token comment"># Having non-zero Limit*s causes performance problems due to accounting overhead</span>
<span class="token comment"># in the kernel. We recommend using cgroups to do container-local accounting.</span>
<span class="token assign-left variable">LimitNOFILE</span><span class="token operator">=</span>infinity
<span class="token assign-left variable">LimitNPROC</span><span class="token operator">=</span>infinity
<span class="token assign-left variable">LimitCORE</span><span class="token operator">=</span>infinity
<span class="token comment"># Uncomment TasksMax if your systemd version supports it.</span>
<span class="token comment"># Only systemd 226 and above support this version.</span>
<span class="token comment">#TasksMax=infinity</span>
<span class="token assign-left variable">TimeoutStartSec</span><span class="token operator">=</span><span class="token number">0</span>
<span class="token comment"># set delegate yes so that systemd does not reset the cgroups of docker containers</span>
<span class="token assign-left variable">Delegate</span><span class="token operator">=</span>yes
<span class="token comment"># kill only the docker process, not all processes in the cgroup</span>
<span class="token assign-left variable">KillMode</span><span class="token operator">=</span>process
<span class="token comment"># restart the docker process if it exits prematurely</span>
<span class="token assign-left variable">Restart</span><span class="token operator">=</span>on-failure
<span class="token assign-left variable">StartLimitBurst</span><span class="token operator">=</span><span class="token number">3</span>
<span class="token assign-left variable">StartLimitInterval</span><span class="token operator">=</span>60s
  
<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>
<span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要开启远程服务<code>ExecStart</code>属性修改为以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/dockerd <span class="token parameter variable">-H</span> tcp://0.0.0.0:2375 <span class="token parameter variable">-H</span> unix:///var/run/docker.sock --selinux-enabled<span class="token operator">=</span>false --default-ulimit <span class="token assign-left variable">nofile</span><span class="token operator">=</span><span class="token number">65536</span>:65536

<span class="token comment"># -H tcp://0.0.0.0:2375 开启远程连接命令</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加文件可执行权限</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">chmod</span> +x /etc/systemd/system/docker.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配置成功后，重新加载 daemon 服务</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl daemon-reload
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动 docker 服务</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl start <span class="token function">docker</span>

systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置docker镜像" tabindex="-1"><a class="header-anchor" href="#配置docker镜像"><span>配置Docker镜像</span></a></h4><p>在目录 <code>etc</code> 下面创建一个 <code>docker</code> 文件夹，进入 <code>docker</code>目录创建 <code>daemon.json</code> 文件</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">vim</span> daemon.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>加入从阿里云申请的镜像源地址。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">{</span>
  <span class="token string">&quot;registry-mirrors&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">&quot;https://ejes884z.mirror.aliyuncs.com&quot;</span><span class="token punctuation">]</span>,
  <span class="token string">&quot;log-driver&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;json-file&quot;</span>,
  <span class="token string">&quot;log-opts&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token string">&quot;max-size&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;1g&quot;</span>, <span class="token string">&quot;max-file&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">}</span>,
  <span class="token string">&quot;live-restore&quot;</span><span class="token builtin class-name">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token comment"># registry-mirrors 个人镜像源地址, 如果有多个仓库， 在相应的列表里增加即可。</span>
<span class="token comment"># log-driver log-opts 全局配置容器日志大小，如果不配置没有限制大小，后面有可能会导致磁盘崩盘</span>
<span class="token comment"># live-restore 更新daemon.json配置文件时，自动加载配置，不用重新启动Docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置成功后，重新启动Docker</p><p><strong>安装 docker-compose</strong></p><p>1、下载docker-compose 文件</p>`,26)),s("p",null,[s("a",k,[e[8]||(e[8]=n("https://github.com/docker/compose/releases/tag/v2.18.1")),t(a)])]),e[12]||(e[12]=i(`<p>2、上传至服务器并复制到指定目录</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code># 复制到 /usr/local/bin
cp docker-compose-linux-x86_64 /usr/local/bin/docker-compose
# 设置可执行
chmod +x /usr/local/bin/docker-compose
# 创建软链
ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、确定是否成功</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>docker-compose version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4))])}const x=o(d,[["render",b],["__file","Linux离线安装Docker.html.vue"]]),D=JSON.parse('{"path":"/other/%E8%BD%AF%E8%B7%AF%E7%94%B1/OpenWrt/Linux%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85Docker.html","title":"Linux离线安装Docker","lang":"zh-CN","frontmatter":{},"headers":[{"level":4,"title":"下载Docker","slug":"下载docker","link":"#下载docker","children":[]},{"level":4,"title":"安装Docker","slug":"安装docker","link":"#安装docker","children":[]},{"level":4,"title":"配置Docker镜像","slug":"配置docker镜像","link":"#配置docker镜像","children":[]}],"git":{"createdTime":1731900879000,"updatedTime":1731900879000,"contributors":[{"name":"dkyg666","email":"43946866+dkyg666@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":2.4,"words":720},"filePathRelative":"other/软路由/OpenWrt/Linux离线安装Docker.md","localizedDate":"2024年11月18日","excerpt":"\\n<h4>下载Docker</h4>\\n<p>Docker官网：<a href=\\"https://www.docker.com/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Docker: Accelerated Container Application Development</a></p>\\n<p>Docker引擎安装说明：<a href=\\"https://docs.docker.com/engine/install/centos/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">在 CentOS 上安装 Docker 引擎 |Docker 文档</a></p>"}');export{x as comp,D as data};
