import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,e,b as a,d as s,a as l,o as i,r as c}from"./app-dX96qGh5.js";const r={},p={href:"https://hub.docker.com/layers/ubuntu/library/ubuntu/bionic/images/sha256-32776cc92b5810ce72e77aca1d949de1f348e1d281d3f00ebcc22a3adcdc9f42?context=explore",target:"_blank",rel:"noopener noreferrer"},u={href:"https://gohugo.io/templates/introduction/",target:"_blank",rel:"noopener noreferrer"};function b(m,n){const o=c("ExternalLinkIcon");return i(),t("div",null,[n[14]||(n[14]=e(`<h1 id="列出镜像" tabindex="-1"><a class="header-anchor" href="#列出镜像"><span>列出镜像</span></a></h1><p>要想列出已经下载下来的镜像，可以使用 <code>docker image ls</code> 命令。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> image <span class="token function">ls</span>
REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE
redis                latest              5f515359c7f8        <span class="token number">5</span> days ago          <span class="token number">183</span> MB
nginx                latest              05a60462f8ba        <span class="token number">5</span> days ago          <span class="token number">181</span> MB
mongo                <span class="token number">3.2</span>                 fe9198c04d62        <span class="token number">5</span> days ago          <span class="token number">342</span> MB
<span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>               <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>              00285df0df87        <span class="token number">5</span> days ago          <span class="token number">342</span> MB
ubuntu               <span class="token number">18.04</span>               329ed837d508        <span class="token number">3</span> days ago          <span class="token number">63</span>.3MB
ubuntu               bionic              329ed837d508        <span class="token number">3</span> days ago          <span class="token number">63</span>.3MB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>列表包含了 <code>仓库名</code>、<code>标签</code>、<code>镜像 ID</code>、<code>创建时间</code> 以及 <code>所占用的空间</code>。</p><p>其中仓库名、标签在之前的基础概念章节已经介绍过了。<strong>镜像 ID</strong> 则是镜像的唯一标识，一个镜像可以对应多个 <strong>标签</strong>。因此，在上面的例子中，我们可以看到 <code>ubuntu:18.04</code> 和 <code>ubuntu:bionic</code> 拥有相同的 ID，因为它们对应的是同一个镜像。</p><h2 id="镜像体积" tabindex="-1"><a class="header-anchor" href="#镜像体积"><span>镜像体积</span></a></h2>`,6)),a("p",null,[n[1]||(n[1]=s("如果仔细观察，会注意到，这里标识的所占用空间和在 Docker Hub 上看到的镜像大小不同。比如，")),n[2]||(n[2]=a("code",null,"ubuntu:18.04",-1)),n[3]||(n[3]=s(" 镜像大小，在这里是 ")),n[4]||(n[4]=a("code",null,"63.3MB",-1)),n[5]||(n[5]=s("，但是在 ")),a("a",p,[n[0]||(n[0]=s("Docker Hub")),l(o)]),n[6]||(n[6]=s(" 显示的却是 ")),n[7]||(n[7]=a("code",null,"25.47 MB",-1)),n[8]||(n[8]=s("。这是因为 Docker Hub 中显示的体积是压缩后的体积。在镜像下载和上传过程中镜像是保持着压缩状态的，因此 Docker Hub 所显示的大小是网络传输中更关心的流量大小。而 ")),n[9]||(n[9]=a("code",null,"docker image ls",-1)),n[10]||(n[10]=s(" 显示的是镜像下载到本地后，展开的大小，准确说，是展开后的各层所占空间的总和，因为镜像到本地后，查看空间的时候，更关心的是本地磁盘空间占用的大小。"))]),n[15]||(n[15]=e(`<p>另外一个需要注意的问题是，<code>docker image ls</code> 列表中的镜像体积总和并非是所有镜像实际硬盘消耗。由于 Docker 镜像是多层存储结构，并且可以继承、复用，因此不同镜像可能会因为使用相同的基础镜像，从而拥有共同的层。由于 Docker 使用 Union FS，相同的层只需要保存一份即可，因此实际镜像硬盘占用空间很可能要比这个列表镜像大小的总和要小的多。</p><p>你可以通过 <code>docker system df</code> 命令来便捷的查看镜像、容器、数据卷所占用的空间。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> system <span class="token function">df</span>

TYPE                TOTAL               ACTIVE              SIZE                RECLAIMABLE
Images              <span class="token number">24</span>                  <span class="token number">0</span>                   <span class="token number">1</span>.992GB             <span class="token number">1</span>.992GB <span class="token punctuation">(</span><span class="token number">100</span>%<span class="token punctuation">)</span>
Containers          <span class="token number">1</span>                   <span class="token number">0</span>                   <span class="token number">62</span>.82MB             <span class="token number">62</span>.82MB <span class="token punctuation">(</span><span class="token number">100</span>%<span class="token punctuation">)</span>
Local Volumes       <span class="token number">9</span>                   <span class="token number">0</span>                   <span class="token number">652</span>.2MB             <span class="token number">652</span>.2MB <span class="token punctuation">(</span><span class="token number">100</span>%<span class="token punctuation">)</span>
Build Cache                                                 0B                  0B
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="虚悬镜像" tabindex="-1"><a class="header-anchor" href="#虚悬镜像"><span>虚悬镜像</span></a></h2><p>上面的镜像列表中，还可以看到一个特殊的镜像，这个镜像既没有仓库名，也没有标签，均为 <code>&lt;none&gt;</code>。：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>               <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>              00285df0df87        <span class="token number">5</span> days ago          <span class="token number">342</span> MB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个镜像原本是有镜像名和标签的，原来为 <code>mongo:3.2</code>，随着官方镜像维护，发布了新版本后，重新 <code>docker pull mongo:3.2</code> 时，<code>mongo:3.2</code> 这个镜像名被转移到了新下载的镜像身上，而旧的镜像上的这个名称则被取消，从而成为了 <code>&lt;none&gt;</code>。除了 <code>docker pull</code> 可能导致这种情况，<code>docker build</code> 也同样可以导致这种现象。由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为 <code>&lt;none&gt;</code> 的镜像。这类无标签镜像也被称为 <strong>虚悬镜像(dangling image)</strong> ，可以用下面的命令专门显示这类镜像：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> image <span class="token function">ls</span> <span class="token parameter variable">-f</span> <span class="token assign-left variable">dangling</span><span class="token operator">=</span>true
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
<span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>              <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>              00285df0df87        <span class="token number">5</span> days ago          <span class="token number">342</span> MB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般来说，虚悬镜像已经失去了存在的价值，是可以随意删除的，可以用下面的命令删除。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> image prune
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="中间层镜像" tabindex="-1"><a class="header-anchor" href="#中间层镜像"><span>中间层镜像</span></a></h2><p>为了加速镜像构建、重复利用资源，Docker 会利用 <strong>中间层镜像</strong>。所以在使用一段时间后，可能会看到一些依赖的中间层镜像。默认的 <code>docker image ls</code> 列表中只会显示顶层镜像，如果希望显示包括中间层镜像在内的所有镜像的话，需要加 <code>-a</code> 参数。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> image <span class="token function">ls</span> <span class="token parameter variable">-a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样会看到很多无标签的镜像，与之前的虚悬镜像不同，这些无标签的镜像很多都是中间层镜像，是其它镜像所依赖的镜像。这些无标签镜像不应该删除，否则会导致上层镜像因为依赖丢失而出错。实际上，这些镜像也没必要删除，因为之前说过，相同的层只会存一遍，而这些镜像是别的镜像的依赖，因此并不会因为它们被列出来而多存了一份，无论如何你也会需要它们。只要删除那些依赖它们的镜像后，这些依赖的中间层镜像也会被连带删除。</p><h2 id="列出部分镜像" tabindex="-1"><a class="header-anchor" href="#列出部分镜像"><span>列出部分镜像</span></a></h2><p>不加任何参数的情况下，<code>docker image ls</code> 会列出所有顶层镜像，但是有时候我们只希望列出部分镜像。<code>docker image ls</code> 有好几个参数可以帮助做到这个事情。</p><p>根据仓库名列出镜像</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> image <span class="token function">ls</span> ubuntu
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
ubuntu              <span class="token number">18.04</span>               329ed837d508        <span class="token number">3</span> days ago          <span class="token number">63</span>.3MB
ubuntu              bionic              329ed837d508        <span class="token number">3</span> days ago          <span class="token number">63</span>.3MB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>列出特定的某个镜像，也就是说指定仓库名和标签</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> image <span class="token function">ls</span> ubuntu:18.04
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
ubuntu              <span class="token number">18.04</span>               329ed837d508        <span class="token number">3</span> days ago          <span class="token number">63</span>.3MB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除此以外，<code>docker image ls</code> 还支持强大的过滤器参数 <code>--filter</code>，或者简写 <code>-f</code>。之前我们已经看到了使用过滤器来列出虚悬镜像的用法，它还有更多的用法。比如，我们希望看到在 <code>mongo:3.2</code> 之后建立的镜像，可以用下面的命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> image <span class="token function">ls</span> <span class="token parameter variable">-f</span> <span class="token assign-left variable">since</span><span class="token operator">=</span>mongo:3.2
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
redis               latest              5f515359c7f8        <span class="token number">5</span> days ago          <span class="token number">183</span> MB
nginx               latest              05a60462f8ba        <span class="token number">5</span> days ago          <span class="token number">181</span> MB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>想查看某个位置之前的镜像也可以，只需要把 <code>since</code> 换成 <code>before</code> 即可。</p><p>此外，如果镜像构建时，定义了 <code>LABEL</code>，还可以通过 <code>LABEL</code> 来过滤。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> image <span class="token function">ls</span> <span class="token parameter variable">-f</span> <span class="token assign-left variable">label</span><span class="token operator">=</span>com.example.version<span class="token operator">=</span><span class="token number">0.1</span>
<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="以特定格式显示" tabindex="-1"><a class="header-anchor" href="#以特定格式显示"><span>以特定格式显示</span></a></h2><p>默认情况下，<code>docker image ls</code> 会输出一个完整的表格，但是我们并非所有时候都会需要这些内容。比如，刚才删除虚悬镜像的时候，我们需要利用 <code>docker image ls</code> 把所有的虚悬镜像的 ID 列出来，然后才可以交给 <code>docker image rm</code> 命令作为参数来删除指定的这些镜像，这个时候就用到了 <code>-q</code> 参数。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> image <span class="token function">ls</span> <span class="token parameter variable">-q</span>
5f515359c7f8
05a60462f8ba
fe9198c04d62
00285df0df87
329ed837d508
329ed837d508
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>--filter</code> 配合 <code>-q</code> 产生出指定范围的 ID 列表，然后送给另一个 <code>docker</code> 命令作为参数，从而针对这组实体成批的进行某种操作的做法在 Docker 命令行使用过程中非常常见，不仅仅是镜像，将来我们会在各个命令中看到这类搭配以完成很强大的功能。因此每次在文档看到过滤器后，可以多注意一下它们的用法。</p>`,29)),a("p",null,[n[12]||(n[12]=s("另外一些时候，我们可能只是对表格的结构不满意，希望自己组织列；或者不希望有标题，这样方便其它程序解析结果等，这就用到了 ")),a("a",u,[n[11]||(n[11]=s("Go 的模板语法")),l(o)]),n[13]||(n[13]=s("。"))]),n[16]||(n[16]=e(`<p>比如，下面的命令会直接列出镜像结果，并且只包含镜像ID和仓库名：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> image <span class="token function">ls</span> <span class="token parameter variable">--format</span> <span class="token string">&quot;{{.ID}}: {{.Repository}}&quot;</span>
5f515359c7f8: redis
05a60462f8ba: nginx
fe9198c04d62: mongo
00285df0df87: <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>
329ed837d508: ubuntu
329ed837d508: ubuntu
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者打算以表格等距显示，并且有标题行，和默认一样，不过自己定义列：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> image <span class="token function">ls</span> <span class="token parameter variable">--format</span> <span class="token string">&quot;table {{.ID}}<span class="token entity" title="\\t">\\t</span>{{.Repository}}<span class="token entity" title="\\t">\\t</span>{{.Tag}}&quot;</span>
IMAGE ID            REPOSITORY          TAG
5f515359c7f8        redis               latest
05a60462f8ba        nginx               latest
fe9198c04d62        mongo               <span class="token number">3.2</span>
00285df0df87        <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>              <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>
329ed837d508        ubuntu              <span class="token number">18.04</span>
329ed837d508        ubuntu              bionic
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4))])}const g=d(r,[["render",b],["__file","list.html.vue"]]),f=JSON.parse('{"path":"/index/Docker/image/list.html","title":"列出镜像","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"镜像体积","slug":"镜像体积","link":"#镜像体积","children":[]},{"level":2,"title":"虚悬镜像","slug":"虚悬镜像","link":"#虚悬镜像","children":[]},{"level":2,"title":"中间层镜像","slug":"中间层镜像","link":"#中间层镜像","children":[]},{"level":2,"title":"列出部分镜像","slug":"列出部分镜像","link":"#列出部分镜像","children":[]},{"level":2,"title":"以特定格式显示","slug":"以特定格式显示","link":"#以特定格式显示","children":[]}],"git":{"createdTime":1731129855000,"updatedTime":1731129855000,"contributors":[{"name":"dkyg666","email":"43946866+dkyg666@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":6.29,"words":1886},"filePathRelative":"index/Docker/image/list.md","localizedDate":"2024年11月9日","excerpt":"\\n<p>要想列出已经下载下来的镜像，可以使用 <code>docker image ls</code> 命令。</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code>$ <span class=\\"token function\\">docker</span> image <span class=\\"token function\\">ls</span>\\nREPOSITORY           TAG                 IMAGE ID            CREATED             SIZE\\nredis                latest              5f515359c7f8        <span class=\\"token number\\">5</span> days ago          <span class=\\"token number\\">183</span> MB\\nnginx                latest              05a60462f8ba        <span class=\\"token number\\">5</span> days ago          <span class=\\"token number\\">181</span> MB\\nmongo                <span class=\\"token number\\">3.2</span>                 fe9198c04d62        <span class=\\"token number\\">5</span> days ago          <span class=\\"token number\\">342</span> MB\\n<span class=\\"token operator\\">&lt;</span>none<span class=\\"token operator\\">&gt;</span>               <span class=\\"token operator\\">&lt;</span>none<span class=\\"token operator\\">&gt;</span>              00285df0df87        <span class=\\"token number\\">5</span> days ago          <span class=\\"token number\\">342</span> MB\\nubuntu               <span class=\\"token number\\">18.04</span>               329ed837d508        <span class=\\"token number\\">3</span> days ago          <span class=\\"token number\\">63</span>.3MB\\nubuntu               bionic              329ed837d508        <span class=\\"token number\\">3</span> days ago          <span class=\\"token number\\">63</span>.3MB\\n</code></pre></div>"}');export{g as comp,f as data};
