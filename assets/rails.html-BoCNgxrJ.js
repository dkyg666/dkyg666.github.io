import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,e,b as t,d as n,a as o,w as p,r as c,o as d}from"./app-B_h_uIeu.js";const r={};function u(m,s){const a=c("RouteLink");return d(),l("div",null,[s[3]||(s[3]=e(`<h1 id="使用-rails" tabindex="-1"><a class="header-anchor" href="#使用-rails"><span>使用 Rails</span></a></h1><blockquote><p>本小节内容适合 <code>Ruby</code> 开发人员阅读。</p></blockquote><p>我们现在将使用 <code>Compose</code> 配置并运行一个 <code>Rails/PostgreSQL</code> 应用。</p><p>在一切工作开始前，需要先设置好三个必要的文件。</p><p>首先，因为应用将要运行在一个满足所有环境依赖的 Docker 容器里面，那么我们可以通过编辑 <code>Dockerfile</code> 文件来指定 Docker 容器要安装内容。内容如下：</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> ruby</span>
<span class="token instruction"><span class="token keyword">RUN</span> apt-get update -qq &amp;&amp; apt-get install -y build-essential libpq-dev</span>
<span class="token instruction"><span class="token keyword">RUN</span> mkdir /myapp</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /myapp</span>
<span class="token instruction"><span class="token keyword">ADD</span> Gemfile /myapp/Gemfile</span>
<span class="token instruction"><span class="token keyword">RUN</span> bundle install</span>
<span class="token instruction"><span class="token keyword">ADD</span> . /myapp</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6)),t("p",null,[s[1]||(s[1]=n("以上内容指定应用将使用安装了 Ruby、Bundler 以及其依赖件的镜像。更多关于如何编写 Dockerfile 文件的信息可以查看 ")),o(a,{to:"/index/Docker/image/dockerfile/"},{default:p(()=>s[0]||(s[0]=[n("Dockerfile 使用")])),_:1}),s[2]||(s[2]=n("。"))]),s[4]||(s[4]=e(`<p>下一步，我们需要一个引导加载 Rails 的文件 <code>Gemfile</code> 。 等一会儿它还会被 <code>rails new</code> 命令覆盖重写。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> <span class="token string">&#39;https://rubygems.org&#39;</span>
gem <span class="token string">&#39;rails&#39;</span>, <span class="token string">&#39;4.0.2&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，<code>docker-compose.yml</code> 文件才是最神奇的地方。 <code>docker-compose.yml</code> 文件将把所有的东西关联起来。它描述了应用的构成（一个 web 服务和一个数据库）、每个镜像的来源（数据库运行在使用预定义的 PostgreSQL 镜像，web 应用侧将从本地目录创建）、镜像之间的连接，以及服务开放的端口。</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3&quot;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>

  <span class="token key atrule">db</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> postgres
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;5432&quot;</span>

  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> .
    <span class="token key atrule">command</span><span class="token punctuation">:</span> bundle exec rackup <span class="token punctuation">-</span>p 3000
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> .<span class="token punctuation">:</span>/myapp
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;3000:3000&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有文件就绪后，我们就可以通过使用 <code>docker-compose run</code> 命令生成应用的骨架了。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker-compose</span> run web rails new <span class="token builtin class-name">.</span> <span class="token parameter variable">--force</span> <span class="token parameter variable">--database</span><span class="token operator">=</span>postgresql --skip-bundle
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>Compose</code> 会先使用 <code>Dockerfile</code> 为 web 服务创建一个镜像，接着使用这个镜像在容器里运行 <code>rails new </code> 和它之后的命令。一旦这个命令运行完后，应该就可以看一个崭新的应用已经生成了。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">ls</span>
Dockerfile   app          docker-compose.yml      tmp
Gemfile      bin          lib          vendor
Gemfile.lock condocker-compose       log
README.rdoc  condocker-compose.ru    public
Rakefile     db           <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在新的 <code>Gemfile</code> 文件去掉加载 <code>therubyracer</code> 的行的注释，这样我们便可以使用 Javascript 运行环境：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>gem <span class="token string">&#39;therubyracer&#39;</span>, platforms: :ruby
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在我们已经有一个新的 <code>Gemfile</code> 文件，需要再重新创建镜像。（这个会步骤会改变 Dockerfile 文件本身，所以需要重建一次）。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker-compose</span> build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>应用现在就可以启动了，但配置还未完成。Rails 默认读取的数据库目标是 <code>localhost</code> ，我们需要手动指定容器的 <code>db</code> 。同样的，还需要把用户名修改成和 postgres 镜像预定的一致。<br> 打开最新生成的 <code>database.yml</code> 文件。用以下内容替换：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>development: <span class="token operator">&amp;</span>default
  adapter: postgresql
  encoding: unicode
  database: postgres
  pool: <span class="token number">5</span>
  username: postgres
  password:
  host: db

test:
  <span class="token operator">&lt;&lt;</span>: *default
  database: myapp_test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在就可以启动应用了。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker-compose</span> up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果一切正常，你应该可以看到 PostgreSQL 的输出，几秒后可以看到这样的重复信息：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>myapp_web_1 <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token number">2014</span>-01-17 <span class="token number">17</span>:16:29<span class="token punctuation">]</span> INFO  WEBrick <span class="token number">1.3</span>.1
myapp_web_1 <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token number">2014</span>-01-17 <span class="token number">17</span>:16:29<span class="token punctuation">]</span> INFO  ruby <span class="token number">2.0</span>.0 <span class="token punctuation">(</span><span class="token number">2013</span>-11-22<span class="token punctuation">)</span> <span class="token punctuation">[</span>x86_64-linux-gnu<span class="token punctuation">]</span>
myapp_web_1 <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token number">2014</span>-01-17 <span class="token number">17</span>:16:29<span class="token punctuation">]</span> INFO  WEBrick::HTTPServer<span class="token comment">#start: pid=1 port=3000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后， 我们需要做的是创建数据库，打开另一个终端，运行：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker-compose</span> run web rake db:create
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个 web 应用已经开始在你的 docker 守护进程里面监听着 3000 端口了。</p>`,21))])}const b=i(r,[["render",u],["__file","rails.html.vue"]]),g=JSON.parse('{"path":"/index/Docker/compose/rails.html","title":"使用 Rails","lang":"zh-CN","frontmatter":{},"headers":[],"git":{"createdTime":1731129855000,"updatedTime":1731129855000,"contributors":[{"name":"dkyg666","email":"43946866+dkyg666@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":2.7,"words":811},"filePathRelative":"index/Docker/compose/rails.md","localizedDate":"2024年11月9日","excerpt":"\\n<blockquote>\\n<p>本小节内容适合 <code>Ruby</code> 开发人员阅读。</p>\\n</blockquote>\\n<p>我们现在将使用 <code>Compose</code> 配置并运行一个 <code>Rails/PostgreSQL</code> 应用。</p>\\n<p>在一切工作开始前，需要先设置好三个必要的文件。</p>\\n<p>首先，因为应用将要运行在一个满足所有环境依赖的 Docker 容器里面，那么我们可以通过编辑 <code>Dockerfile</code> 文件来指定 Docker 容器要安装内容。内容如下：</p>\\n<div class=\\"language-docker\\" data-ext=\\"docker\\" data-title=\\"docker\\"><pre class=\\"language-docker\\"><code><span class=\\"token instruction\\"><span class=\\"token keyword\\">FROM</span> ruby</span>\\n<span class=\\"token instruction\\"><span class=\\"token keyword\\">RUN</span> apt-get update -qq &amp;&amp; apt-get install -y build-essential libpq-dev</span>\\n<span class=\\"token instruction\\"><span class=\\"token keyword\\">RUN</span> mkdir /myapp</span>\\n<span class=\\"token instruction\\"><span class=\\"token keyword\\">WORKDIR</span> /myapp</span>\\n<span class=\\"token instruction\\"><span class=\\"token keyword\\">ADD</span> Gemfile /myapp/Gemfile</span>\\n<span class=\\"token instruction\\"><span class=\\"token keyword\\">RUN</span> bundle install</span>\\n<span class=\\"token instruction\\"><span class=\\"token keyword\\">ADD</span> . /myapp</span>\\n</code></pre></div>"}');export{b as comp,g as data};
