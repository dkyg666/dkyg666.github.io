import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,e as s,b as a,d as n,a as o,w as i,r as l,o as p}from"./app-BA4_Sfsq.js";const u={},k={href:"https://docs.docker.com/config/containers/multi-service_container/",target:"_blank",rel:"noopener noreferrer"};function h(m,e){const r=l("RouteLink"),t=l("ExternalLinkIcon");return p(),d("div",null,[e[10]||(e[10]=s('<h1 id="常见问题总结" tabindex="-1"><a class="header-anchor" href="#常见问题总结"><span>常见问题总结</span></a></h1><h2 id="镜像相关" tabindex="-1"><a class="header-anchor" href="#镜像相关"><span>镜像相关</span></a></h2><h3 id="如何批量清理临时镜像文件" tabindex="-1"><a class="header-anchor" href="#如何批量清理临时镜像文件"><span>如何批量清理临时镜像文件？</span></a></h3><p>答：可以使用 <code>docker image prune</code> 命令。</p><h3 id="如何查看镜像支持的环境变量" tabindex="-1"><a class="header-anchor" href="#如何查看镜像支持的环境变量"><span>如何查看镜像支持的环境变量？</span></a></h3><p>答：可以使用 <code>docker run IMAGE env</code> 命令。</p><h3 id="本地的镜像文件都存放在哪里" tabindex="-1"><a class="header-anchor" href="#本地的镜像文件都存放在哪里"><span>本地的镜像文件都存放在哪里？</span></a></h3><p>答：与 Docker 相关的本地资源默认存放在 <code>/var/lib/docker/</code> 目录下，以 <code>overlay2</code> 文件系统为例，其中 <code>containers</code> 目录存放容器信息，<code>image</code> 目录存放镜像信息，<code>overlay2</code> 目录下存放具体的镜像层文件。</p><h3 id="构建-docker-镜像应该遵循哪些原则" tabindex="-1"><a class="header-anchor" href="#构建-docker-镜像应该遵循哪些原则"><span>构建 Docker 镜像应该遵循哪些原则？</span></a></h3><p>答：整体原则上，尽量保持镜像功能的明确和内容的精简，要点包括</p><ul><li><p>尽量选取满足需求但较小的基础系统镜像，例如大部分时候可以选择 <code>alpine</code> 镜像，仅有不足六兆大小；</p></li><li><p>清理编译生成文件、安装包的缓存等临时文件；</p></li><li><p>安装各个软件时候要指定准确的版本号，并避免引入不需要的依赖；</p></li><li><p>从安全角度考虑，应用要尽量使用系统的库和依赖；</p></li><li><p>如果安装应用时候需要配置一些特殊的环境变量，在安装后要还原不需要保持的变量值；</p></li><li><p>使用 Dockerfile 创建镜像时候要添加 .dockerignore 文件或使用干净的工作目录。</p></li></ul>',11)),a("p",null,[e[1]||(e[1]=n("更多内容请查看 ")),o(r,{to:"/index/Docker/appendix/best_practices.html"},{default:i(()=>e[0]||(e[0]=[n("Dockerfile 最佳实践")])),_:1})]),e[11]||(e[11]=s(`<h3 id="碰到网络问题-无法-pull-镜像-命令行指定-http-proxy-无效" tabindex="-1"><a class="header-anchor" href="#碰到网络问题-无法-pull-镜像-命令行指定-http-proxy-无效"><span>碰到网络问题，无法 pull 镜像，命令行指定 http_proxy 无效？</span></a></h3><p>答：在 Docker 配置文件中添加 <code>export http_proxy=&quot;http://&lt;PROXY_HOST&gt;:&lt;PROXY_PORT&gt;&quot;</code>，之后重启 Docker 服务即可。</p><h2 id="容器相关" tabindex="-1"><a class="header-anchor" href="#容器相关"><span>容器相关</span></a></h2><h3 id="容器退出后-通过-docker-container-ls-命令查看不到-数据会丢失么" tabindex="-1"><a class="header-anchor" href="#容器退出后-通过-docker-container-ls-命令查看不到-数据会丢失么"><span>容器退出后，通过 docker container ls 命令查看不到，数据会丢失么？</span></a></h3><p>答：容器退出后会处于终止（exited）状态，此时可以通过 <code>docker container ls -a</code> 查看。其中的数据也不会丢失，还可以通过 <code>docker start</code> 命令来启动它。只有删除掉容器才会清除所有数据。</p><h3 id="如何停止所有正在运行的容器" tabindex="-1"><a class="header-anchor" href="#如何停止所有正在运行的容器"><span>如何停止所有正在运行的容器？</span></a></h3><p>答：可以使用 <code>docker stop $(docker container ls -q)</code> 命令。</p><h3 id="如何批量清理已经停止的容器" tabindex="-1"><a class="header-anchor" href="#如何批量清理已经停止的容器"><span>如何批量清理已经停止的容器？</span></a></h3><p>答：可以使用 <code>docker container prune</code> 命令。</p><h3 id="如何获取某个容器的-pid-信息" tabindex="-1"><a class="header-anchor" href="#如何获取某个容器的-pid-信息"><span>如何获取某个容器的 PID 信息？</span></a></h3><p>答：可以使用</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> inspect <span class="token parameter variable">--format</span> <span class="token string">&#39;{{ .State.Pid }}&#39;</span> <span class="token operator">&lt;</span>CONTAINER ID or NAME<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="如何获取某个容器的-ip-地址" tabindex="-1"><a class="header-anchor" href="#如何获取某个容器的-ip-地址"><span>如何获取某个容器的 IP 地址？</span></a></h3><p>答：可以使用</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> inspect <span class="token parameter variable">--format</span> <span class="token string">&#39;{{ .NetworkSettings.IPAddress }}&#39;</span> <span class="token operator">&lt;</span>CONTAINER ID or NAME<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="如何给容器指定一个固定-ip-地址-而不是每次重启容器-ip-地址都会变" tabindex="-1"><a class="header-anchor" href="#如何给容器指定一个固定-ip-地址-而不是每次重启容器-ip-地址都会变"><span>如何给容器指定一个固定 IP 地址，而不是每次重启容器 IP 地址都会变？</span></a></h3><p>答：使用以下命令启动容器可以使容器 IP 固定不变</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> network create <span class="token parameter variable">-d</span> bridge <span class="token parameter variable">--subnet</span> <span class="token number">172.25</span>.0.0/16 my-net

$ <span class="token function">docker</span> run <span class="token parameter variable">--network</span><span class="token operator">=</span>my-net <span class="token parameter variable">--ip</span><span class="token operator">=</span><span class="token number">172.25</span>.3.3 <span class="token parameter variable">-itd</span> <span class="token parameter variable">--name</span><span class="token operator">=</span>my-container busybox
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如何临时退出一个正在交互的容器的终端-而不终止它" tabindex="-1"><a class="header-anchor" href="#如何临时退出一个正在交互的容器的终端-而不终止它"><span>如何临时退出一个正在交互的容器的终端，而不终止它？</span></a></h3><p>答：按 <code>Ctrl-p Ctrl-q</code>。如果按 <code>Ctrl-c</code> 往往会让容器内应用进程终止，进而会终止容器。</p><h3 id="使用-docker-port-命令映射容器的端口时-系统报错-error-no-public-port-80-published-for-xxx" tabindex="-1"><a class="header-anchor" href="#使用-docker-port-命令映射容器的端口时-系统报错-error-no-public-port-80-published-for-xxx"><span>使用 <code>docker port</code> 命令映射容器的端口时，系统报错“Error: No public port &#39;80&#39; published for xxx”？</span></a></h3><p>答：</p><ul><li><p>创建镜像时 <code>Dockerfile</code> 要通过 <code>EXPOSE</code> 指定正确的开放端口；</p></li><li><p>容器启动时指定 <code>PublishAllPort = true</code>。</p></li></ul><h3 id="可以在一个容器中同时运行多个应用进程么" tabindex="-1"><a class="header-anchor" href="#可以在一个容器中同时运行多个应用进程么"><span>可以在一个容器中同时运行多个应用进程么？</span></a></h3>`,24)),a("p",null,[e[3]||(e[3]=n("答：一般并不推荐在同一个容器内运行多个应用进程。如果有类似需求，可以通过一些额外的进程管理机制，比如 ")),e[4]||(e[4]=a("code",null,"supervisord",-1)),e[5]||(e[5]=n(" 来管理所运行的进程。可以参考 ")),a("a",k,[e[2]||(e[2]=n("https://docs.docker.com/config/containers/multi-service_container/")),o(t)]),e[6]||(e[6]=n(" 。"))]),e[12]||(e[12]=s(`<h3 id="如何控制容器占用系统资源-cpu、内存-的份额" tabindex="-1"><a class="header-anchor" href="#如何控制容器占用系统资源-cpu、内存-的份额"><span>如何控制容器占用系统资源（CPU、内存）的份额？</span></a></h3><p>答：在使用 <code>docker create</code> 命令创建容器或使用 <code>docker run</code> 创建并启动容器的时候，可以使用 -c|--cpu-shares[=0] 参数来调整容器使用 CPU 的权重；使用 -m|--memory[=MEMORY] 参数来调整容器使用内存的大小。</p><h2 id="仓库相关" tabindex="-1"><a class="header-anchor" href="#仓库相关"><span>仓库相关</span></a></h2><h3 id="仓库-repository-、注册服务器-registry-、注册索引-index-有何关系" tabindex="-1"><a class="header-anchor" href="#仓库-repository-、注册服务器-registry-、注册索引-index-有何关系"><span>仓库（Repository）、注册服务器（Registry）、注册索引（Index） 有何关系？</span></a></h3><p>首先，仓库是存放一组关联镜像的集合，比如同一个应用的不同版本的镜像。</p><p>注册服务器是存放实际的镜像文件的地方。注册索引则负责维护用户的账号、权限、搜索、标签等的管理。因此，注册服务器利用注册索引来实现认证等管理。</p><h2 id="配置相关" tabindex="-1"><a class="header-anchor" href="#配置相关"><span>配置相关</span></a></h2><h3 id="docker-的配置文件放在哪里-如何修改配置" tabindex="-1"><a class="header-anchor" href="#docker-的配置文件放在哪里-如何修改配置"><span>Docker 的配置文件放在哪里，如何修改配置？</span></a></h3><p>答：使用 <code>systemd</code> 的系统（如 Ubuntu 16.04、Centos 等）的配置文件在 <code>/etc/docker/daemon.json</code>。</p><h3 id="如何更改-docker-的默认存储位置" tabindex="-1"><a class="header-anchor" href="#如何更改-docker-的默认存储位置"><span>如何更改 Docker 的默认存储位置？</span></a></h3><p>答：Docker 的默认存储位置是 <code>/var/lib/docker</code>，如果希望将 Docker 的本地文件存储到其他分区，可以使用 Linux 软连接的方式来完成，或者在启动 daemon 时通过 <code>-g</code> 参数指定，或者修改配置文件 <code>/etc/docker/daemon.json</code> 的 &quot;data-root&quot; 项 。可以使用 <code>docker system info | grep &quot;Root Dir&quot;</code> 查看当前使用的存储位置。</p><p>例如，如下操作将默认存储位置迁移到 /storage/docker。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@s26 ~<span class="token punctuation">]</span><span class="token comment"># df -h</span>
Filesystem                    Size  Used Avail Use% Mounted on
/dev/mapper/VolGroup-lv_root   50G  <span class="token number">5</span>.3G   42G  <span class="token number">12</span>% /
tmpfs                          48G  228K   48G   <span class="token number">1</span>% /dev/shm
/dev/sda1                     485M   40M  420M   <span class="token number">9</span>% /boot
/dev/mapper/VolGroup-lv_home  222G  188M  210G   <span class="token number">1</span>% /home
/dev/sdb2                     <span class="token number">2</span>.7T  323G  <span class="token number">2</span>.3T  <span class="token number">13</span>% /storage
<span class="token punctuation">[</span>root@s26 ~<span class="token punctuation">]</span><span class="token comment"># service docker stop</span>
<span class="token punctuation">[</span>root@s26 ~<span class="token punctuation">]</span><span class="token comment"># cd /var/lib/</span>
<span class="token punctuation">[</span>root@s26 lib<span class="token punctuation">]</span><span class="token comment"># mv docker /storage/</span>
<span class="token punctuation">[</span>root@s26 lib<span class="token punctuation">]</span><span class="token comment"># ln -s /storage/docker/ docker</span>
<span class="token punctuation">[</span>root@s26 lib<span class="token punctuation">]</span><span class="token comment"># ls -la docker</span>
lrwxrwxrwx. <span class="token number">1</span> root root <span class="token number">15</span> <span class="token number">11</span>月 <span class="token number">17</span> <span class="token number">13</span>:43 <span class="token function">docker</span> -<span class="token operator">&gt;</span> /storage/docker
<span class="token punctuation">[</span>root@s26 lib<span class="token punctuation">]</span><span class="token comment"># service docker start</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用内存和-swap-限制启动容器时候报警告-warning-your-kernel-does-not-support-cgroup-swap-limit-warning-your-kernel-does-not-support-swap-limit-capabilities-limitation-discarded" tabindex="-1"><a class="header-anchor" href="#使用内存和-swap-限制启动容器时候报警告-warning-your-kernel-does-not-support-cgroup-swap-limit-warning-your-kernel-does-not-support-swap-limit-capabilities-limitation-discarded"><span>使用内存和 swap 限制启动容器时候报警告：&quot;WARNING: Your kernel does not support cgroup swap limit. WARNING: Your kernel does not support swap limit capabilities. Limitation discarded.&quot;？</span></a></h3><p>答：这是因为系统默认没有开启对内存和 swap 使用的统计功能，引入该功能会带来性能的下降。要开启该功能，可以采取如下操作：</p><ul><li><p>编辑 <code>/etc/default/grub</code> 文件（Ubuntu 系统为例），配置 <code>GRUB_CMDLINE_LINUX=&quot;cgroup_enable=memory swapaccount=1&quot;</code></p></li><li><p>更新 grub：<code>$ sudo update-grub</code></p></li><li><p>重启系统，即可。</p></li></ul><h2 id="docker-与虚拟化" tabindex="-1"><a class="header-anchor" href="#docker-与虚拟化"><span>Docker 与虚拟化</span></a></h2><h3 id="docker-与-lxc-linux-container-有何不同" tabindex="-1"><a class="header-anchor" href="#docker-与-lxc-linux-container-有何不同"><span>Docker 与 LXC（Linux Container）有何不同？</span></a></h3><p>答：LXC 利用 Linux 上相关技术实现了容器。Docker 则在如下的几个方面进行了改进：</p><ul><li>移植性：通过抽象容器配置，容器可以实现从一个平台移植到另一个平台；</li><li>镜像系统：基于 OverlayFS 的镜像系统为容器的分发带来了很多的便利，同时共同的镜像层只需要存储一份，实现高效率的存储；</li><li>版本管理：类似于Git的版本管理理念，用户可以更方便的创建、管理镜像文件；</li><li>仓库系统：仓库系统大大降低了镜像的分发和管理的成本；</li><li>周边工具：各种现有工具（配置管理、云平台）对 Docker 的支持，以及基于 Docker的 PaaS、CI 等系统，让 Docker 的应用更加方便和多样化。</li></ul><h3 id="docker-与-vagrant-有何不同" tabindex="-1"><a class="header-anchor" href="#docker-与-vagrant-有何不同"><span>Docker 与 Vagrant 有何不同？</span></a></h3><p>答：两者的定位完全不同。</p><ul><li><p>Vagrant 类似 Boot2Docker（一款运行 Docker 的最小内核），是一套虚拟机的管理环境。Vagrant 可以在多种系统上和虚拟机软件中运行，可以在 Windows，Mac 等非 Linux 平台上为 Docker 提供支持，自身具有较好的包装性和移植性。</p></li><li><p>原生的 Docker 自身只能运行在 Linux 平台上，但启动和运行的性能都比虚拟机要快，往往更适合快速开发和部署应用的场景。</p></li></ul><p>简单说：Vagrant 适合用来管理虚拟机，而 Docker 适合用来管理应用环境。</p><h3 id="开发环境中-docker-和-vagrant-该如何选择" tabindex="-1"><a class="header-anchor" href="#开发环境中-docker-和-vagrant-该如何选择"><span>开发环境中 Docker 和 Vagrant 该如何选择？</span></a></h3><p>答：Docker 不是虚拟机，而是进程隔离，对于资源的消耗很少，但是目前需要 Linux 环境支持。Vagrant 是虚拟机上做的封装，虚拟机本身会消耗资源。</p><p>如果本地使用的 Linux 环境，推荐都使用 Docker。</p><p>如果本地使用的是 macOS 或者 Windows 环境，那就需要开虚拟机，单一开发环境下 Vagrant 更简单；多环境开发下推荐在 Vagrant 里面再使用 Docker 进行环境隔离。</p><h2 id="其它" tabindex="-1"><a class="header-anchor" href="#其它"><span>其它</span></a></h2><h3 id="docker-能在非-linux-平台-比如-windows-或-macos-上运行么" tabindex="-1"><a class="header-anchor" href="#docker-能在非-linux-平台-比如-windows-或-macos-上运行么"><span>Docker 能在非 Linux 平台（比如 Windows 或 macOS ）上运行么？</span></a></h3>`,30)),a("p",null,[e[8]||(e[8]=n("答：完全可以。安装方法请查看 ")),o(r,{to:"/index/Docker/install/"},{default:i(()=>e[7]||(e[7]=[n("安装 Docker")])),_:1}),e[9]||(e[9]=n(" 一节"))]),e[13]||(e[13]=s(`<h3 id="如何将一台宿主主机的-docker-环境迁移到另外一台宿主主机" tabindex="-1"><a class="header-anchor" href="#如何将一台宿主主机的-docker-环境迁移到另外一台宿主主机"><span>如何将一台宿主主机的 Docker 环境迁移到另外一台宿主主机？</span></a></h3><p>答：停止 Docker 服务。将整个 Docker 存储文件夹复制到另外一台宿主主机，然后调整另外一台宿主主机的配置即可。</p><h3 id="如何进入-docker-容器的网络命名空间" tabindex="-1"><a class="header-anchor" href="#如何进入-docker-容器的网络命名空间"><span>如何进入 Docker 容器的网络命名空间？</span></a></h3><p>答：Docker 在创建容器后，删除了宿主主机上 <code>/var/run/netns</code> 目录中的相关的网络命名空间文件。因此，在宿主主机上是无法看到或访问容器的网络命名空间的。</p><p>用户可以通过如下方法来手动恢复它。</p><p>首先，使用下面的命令查看容器进程信息，比如这里的 1234。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> inspect <span class="token parameter variable">--format</span><span class="token operator">=</span><span class="token string">&#39;{{. State.Pid}} &#39;</span> <span class="token variable">$container_id</span>
<span class="token number">1234</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，在 <code>/proc</code> 目录下，把对应的网络命名空间文件链接到 <code>/var/run/netns</code> 目录。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> /proc/1234/ns/net /var/run/netns/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，在宿主主机上就可以看到容器的网络命名空间信息。例如</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> <span class="token function">ip</span> netns show
<span class="token number">1234</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，用户可以通过正常的系统命令来查看或操作容器的命名空间了。例如修改容器的 IP 地址信息为 <code>172.17.0.100/16</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> <span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> <span class="token number">1234</span> <span class="token function">ifconfig</span> eth0 <span class="token number">172.17</span>.0.100/16
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="如何获取容器绑定到本地那个-veth-接口上" tabindex="-1"><a class="header-anchor" href="#如何获取容器绑定到本地那个-veth-接口上"><span>如何获取容器绑定到本地那个 veth 接口上？</span></a></h3><p>答：Docker 容器启动后，会通过 veth 接口对连接到本地网桥，veth 接口命名跟容器命名毫无关系，十分难以找到对应关系。</p><p>最简单的一种方式是通过查看接口的索引号，在容器中执行 <code>ip a</code> 命令，查看到本地接口最前面的接口索引号，如 <code>205</code>，将此值加上 1，即 <code>206</code>，然后在本地主机执行 <code>ip a</code> 命令，查找接口索引号为 <code>206</code> 的接口，两者即为连接的 veth 接口对。</p>`,16))])}const g=c(u,[["render",h],["__file","index.html.vue"]]),x=JSON.parse(`{"path":"/index/Docker/appendix/faq/","title":"常见问题总结","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"镜像相关","slug":"镜像相关","link":"#镜像相关","children":[{"level":3,"title":"如何批量清理临时镜像文件？","slug":"如何批量清理临时镜像文件","link":"#如何批量清理临时镜像文件","children":[]},{"level":3,"title":"如何查看镜像支持的环境变量？","slug":"如何查看镜像支持的环境变量","link":"#如何查看镜像支持的环境变量","children":[]},{"level":3,"title":"本地的镜像文件都存放在哪里？","slug":"本地的镜像文件都存放在哪里","link":"#本地的镜像文件都存放在哪里","children":[]},{"level":3,"title":"构建 Docker 镜像应该遵循哪些原则？","slug":"构建-docker-镜像应该遵循哪些原则","link":"#构建-docker-镜像应该遵循哪些原则","children":[]},{"level":3,"title":"碰到网络问题，无法 pull 镜像，命令行指定 http_proxy 无效？","slug":"碰到网络问题-无法-pull-镜像-命令行指定-http-proxy-无效","link":"#碰到网络问题-无法-pull-镜像-命令行指定-http-proxy-无效","children":[]}]},{"level":2,"title":"容器相关","slug":"容器相关","link":"#容器相关","children":[{"level":3,"title":"容器退出后，通过 docker container ls 命令查看不到，数据会丢失么？","slug":"容器退出后-通过-docker-container-ls-命令查看不到-数据会丢失么","link":"#容器退出后-通过-docker-container-ls-命令查看不到-数据会丢失么","children":[]},{"level":3,"title":"如何停止所有正在运行的容器？","slug":"如何停止所有正在运行的容器","link":"#如何停止所有正在运行的容器","children":[]},{"level":3,"title":"如何批量清理已经停止的容器？","slug":"如何批量清理已经停止的容器","link":"#如何批量清理已经停止的容器","children":[]},{"level":3,"title":"如何获取某个容器的 PID 信息？","slug":"如何获取某个容器的-pid-信息","link":"#如何获取某个容器的-pid-信息","children":[]},{"level":3,"title":"如何获取某个容器的 IP 地址？","slug":"如何获取某个容器的-ip-地址","link":"#如何获取某个容器的-ip-地址","children":[]},{"level":3,"title":"如何给容器指定一个固定 IP 地址，而不是每次重启容器 IP 地址都会变？","slug":"如何给容器指定一个固定-ip-地址-而不是每次重启容器-ip-地址都会变","link":"#如何给容器指定一个固定-ip-地址-而不是每次重启容器-ip-地址都会变","children":[]},{"level":3,"title":"如何临时退出一个正在交互的容器的终端，而不终止它？","slug":"如何临时退出一个正在交互的容器的终端-而不终止它","link":"#如何临时退出一个正在交互的容器的终端-而不终止它","children":[]},{"level":3,"title":"使用 docker port 命令映射容器的端口时，系统报错“Error: No public port '80' published for xxx”？","slug":"使用-docker-port-命令映射容器的端口时-系统报错-error-no-public-port-80-published-for-xxx","link":"#使用-docker-port-命令映射容器的端口时-系统报错-error-no-public-port-80-published-for-xxx","children":[]},{"level":3,"title":"可以在一个容器中同时运行多个应用进程么？","slug":"可以在一个容器中同时运行多个应用进程么","link":"#可以在一个容器中同时运行多个应用进程么","children":[]},{"level":3,"title":"如何控制容器占用系统资源（CPU、内存）的份额？","slug":"如何控制容器占用系统资源-cpu、内存-的份额","link":"#如何控制容器占用系统资源-cpu、内存-的份额","children":[]}]},{"level":2,"title":"仓库相关","slug":"仓库相关","link":"#仓库相关","children":[{"level":3,"title":"仓库（Repository）、注册服务器（Registry）、注册索引（Index） 有何关系？","slug":"仓库-repository-、注册服务器-registry-、注册索引-index-有何关系","link":"#仓库-repository-、注册服务器-registry-、注册索引-index-有何关系","children":[]}]},{"level":2,"title":"配置相关","slug":"配置相关","link":"#配置相关","children":[{"level":3,"title":"Docker 的配置文件放在哪里，如何修改配置？","slug":"docker-的配置文件放在哪里-如何修改配置","link":"#docker-的配置文件放在哪里-如何修改配置","children":[]},{"level":3,"title":"如何更改 Docker 的默认存储位置？","slug":"如何更改-docker-的默认存储位置","link":"#如何更改-docker-的默认存储位置","children":[]},{"level":3,"title":"使用内存和 swap 限制启动容器时候报警告：\\"WARNING: Your kernel does not support cgroup swap limit. WARNING: Your kernel does not support swap limit capabilities. Limitation discarded.\\"？","slug":"使用内存和-swap-限制启动容器时候报警告-warning-your-kernel-does-not-support-cgroup-swap-limit-warning-your-kernel-does-not-support-swap-limit-capabilities-limitation-discarded","link":"#使用内存和-swap-限制启动容器时候报警告-warning-your-kernel-does-not-support-cgroup-swap-limit-warning-your-kernel-does-not-support-swap-limit-capabilities-limitation-discarded","children":[]}]},{"level":2,"title":"Docker 与虚拟化","slug":"docker-与虚拟化","link":"#docker-与虚拟化","children":[{"level":3,"title":"Docker 与 LXC（Linux Container）有何不同？","slug":"docker-与-lxc-linux-container-有何不同","link":"#docker-与-lxc-linux-container-有何不同","children":[]},{"level":3,"title":"Docker 与 Vagrant 有何不同？","slug":"docker-与-vagrant-有何不同","link":"#docker-与-vagrant-有何不同","children":[]},{"level":3,"title":"开发环境中 Docker 和 Vagrant 该如何选择？","slug":"开发环境中-docker-和-vagrant-该如何选择","link":"#开发环境中-docker-和-vagrant-该如何选择","children":[]}]},{"level":2,"title":"其它","slug":"其它","link":"#其它","children":[{"level":3,"title":"Docker 能在非 Linux 平台（比如 Windows 或 macOS ）上运行么？","slug":"docker-能在非-linux-平台-比如-windows-或-macos-上运行么","link":"#docker-能在非-linux-平台-比如-windows-或-macos-上运行么","children":[]},{"level":3,"title":"如何将一台宿主主机的 Docker 环境迁移到另外一台宿主主机？","slug":"如何将一台宿主主机的-docker-环境迁移到另外一台宿主主机","link":"#如何将一台宿主主机的-docker-环境迁移到另外一台宿主主机","children":[]},{"level":3,"title":"如何进入 Docker 容器的网络命名空间？","slug":"如何进入-docker-容器的网络命名空间","link":"#如何进入-docker-容器的网络命名空间","children":[]},{"level":3,"title":"如何获取容器绑定到本地那个 veth 接口上？","slug":"如何获取容器绑定到本地那个-veth-接口上","link":"#如何获取容器绑定到本地那个-veth-接口上","children":[]}]}],"git":{"createdTime":1731129855000,"updatedTime":1731129855000,"contributors":[{"name":"dkyg666","email":"43946866+dkyg666@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":8.09,"words":2428},"filePathRelative":"index/Docker/appendix/faq/README.md","localizedDate":"2024年11月9日","excerpt":"\\n<h2>镜像相关</h2>\\n<h3>如何批量清理临时镜像文件？</h3>\\n<p>答：可以使用 <code>docker image prune</code> 命令。</p>\\n<h3>如何查看镜像支持的环境变量？</h3>\\n<p>答：可以使用 <code>docker run IMAGE env</code> 命令。</p>\\n<h3>本地的镜像文件都存放在哪里？</h3>\\n<p>答：与 Docker 相关的本地资源默认存放在 <code>/var/lib/docker/</code> 目录下，以 <code>overlay2</code> 文件系统为例，其中 <code>containers</code> 目录存放容器信息，<code>image</code> 目录存放镜像信息，<code>overlay2</code> 目录下存放具体的镜像层文件。</p>"}`);export{g as comp,x as data};
